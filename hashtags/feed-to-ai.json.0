{
  "1": [
    "Documentation",
    "# Integrations\n\nThis guide is for integrating with Namada. It is intended for developers who want to integrate with Namada in their own applications, and for engineers who want to extend Namada.\n\n## License\nNamada operates under the [GPLv3 license](https://www.gnu.org/licenses/gpl-3.0.html) and is free to use and modify. Please see the [LICENSE](https://github.com/anoma/namada/blob/main/LICENSE) for more information.\n\n## Table of Contents\n- [SDK](./integrating-with-namada/sdk.mdx)\n- [Indexer](./integrating-with-namada/indexer.mdx)"
  ],
  "2": [
    "Documentation",
    "Testnets",
    "Expedition",
    "Validators",
    "Genesis",
    "Flowchart",
    "Explorer",
    "Upgrades",
    "Community"
  ],
  "3": [
    "Documentation",
    "# Mainnets\nThis page will be updated and filled wen mainnet is launched.\n\n"
  ],
  "4": [
    "Documentation",
    "Testnet",
    "Genesis",
    "Validator",
    "FullNode",
    "PreGenesis",
    "Bonding",
    "Transactions",
    "NAM"
  ],
  "5": [
    "Documentation",
    "Genesis",
    "Validator",
    "Testnet",
    "PreGenesis",
    "Bonding",
    "Transactions",
    "PullRequest",
    "ChainID"
  ],
  "6": [
    "Documentation",
    "Pregenesis",
    "Validators",
    "Genesis",
    "Testnets",
    "Nodes",
    "Ledger",
    "Postgenesis",
    "Tokens"
  ],
  "7": [
    "Documentation",
    "Validators",
    "Genesis",
    "Staking",
    "Bonding",
    "ConsensusSet",
    "TopRanked",
    "FullNode",
    "Faucet"
  ],
  "8": [
    "Documentation",
    "Upgrades",
    "Testnets",
    "Releases",
    "Versions",
    "Cometbft",
    "Hardfork",
    "Genesis",
    "Validators",
    "Resync",
    "Hotfix",
    "Ledger",
    "Binaries",
    "Tendermint",
    "Postmortem",
    "Timeline",
    "Expedition",
    "Shielded",
    "Interruption",
    "Conversion"
  ],
  "9": [
    "Documentation",
    "Validators",
    "Faucet",
    "Tokens",
    "EthBridge",
    "IBCTransfer",
    "Requirements",
    "Binaries",
    "FAQ"
  ],
  "10": [
    "Documentation",
    "EnvSetup",
    "SourceBuild",
    "PreRequisites",
    "PortOpening",
    "ServerSetup",
    "VersionChecking",
    "Rust",
    "CometBFT"
  ],
  "11": [
    "Documentation",
    "Testnet",
    "Community",
    "Orchestrator",
    "Docker",
    "Ubuntu",
    "CLI",
    "Cheatsheet",
    "Luminara"
  ],
  "12": [
    "Documentation",
    "PoW",
    "Faucet",
    "Testnet",
    "Fees",
    "ImplicitAccounts",
    "GasPayer",
    "Mainnet",
    "API"
  ],
  "13": [
    "Documentation",
    "import { Callout, Steps } from 'nextra-theme-docs'\n\n# Steps for migrating testnets\n\n<Callout>\nWith the introduction of `v0.28.0` there is no way to migrate keys over. Please follow the instructions from scratch.\n</Callout>"
  ],
  "14": [
    "Documentation",
    "Cryptography",
    "Wallets",
    "Mnemonic",
    "Keypairs",
    "Addresses",
    "SDK",
    "Rust",
    "HD",
    "Filesystem"
  ],
  "15": [
    "Documentation",
    "SdkClient",
    "AsyncTrait",
    "ClientTrait",
    "EncodedResponseQuery",
    "TendermintRpc",
    "NamadaImpl",
    "FsWalletUtils",
    "FsShieldedUtils"
  ],
  "16": [
    "Documentation",
    "SDK",
    "Decentralized",
    "Identity",
    "Ledger",
    "TypeScript",
    "Rust",
    "RPC",
    "Documentation"
  ],
  "17": [
    "Documentation",
    "Cryptography",
    "KeyManagement",
    "Multisignature",
    "AccountGeneration",
    "TransactionSigning",
    "PublicKeyRevelation",
    "OfflineWallets",
    "RustProgramming"
  ],
  "18": [
    "Documentation",
    "Transfers",
    "Wallets",
    "Shielding",
    "Transactions",
    "Accounts",
    "Signing",
    "Addresses",
    "Tokens"
  ],
  "19": [
    "Documentation",
    "ProofOfStake",
    "SDK",
    "Callout",
    "Validator",
    "Bond",
    "Unbond",
    "Redelegation",
    "Rewards"
  ],
  "20": [
    "Documentation",
    "Governance",
    "Proposals",
    "Voting",
    "Transactions",
    "Cryptography",
    "Consensus",
    "DAO",
    "DLT",
    "DApp"
  ],
  "21": [
    "Documentation",
    "RustSDK",
    "WebAssembly",
    "CargoToml",
    "TendermintRPC",
    "AsyncAwait",
    "Reqwest",
    "Minio",
    "Itertools"
  ],
  "22": [
    "Documentation",
    "import { Callout } from 'nextra-theme-docs';\n\n# The Namada Light SDK\n\nThe namada light sdk was developed to provide a simple way to interact with the Namada API.\nIt provides pre-built functions that can be used in a more \"out of the box\" way than the SDK, but still requires some knowledge of the API.\n\nThis documentation aims to provide that knowledge.\n\n## Sections\n\n- [Setup](./light-sdk/setup.mdx)\n- [Usage](./light-sdk/usage.mdx)\n- [Examples](./light-sdk/examples.mdx)"
  ],
  "23": [
    "Documentation",
    "Indexer",
    "Zondax",
    "SDK",
    "Postgres",
    "Docker",
    "Tendermint",
    "Jaeger",
    "Prometheus"
  ],
  "24": [
    "Documentation",
    "## Writing\n\nThe writing module exposes the broadcast function to send transactions to a Namada node.\n\n```rust\npub fn broadcast_tx(tendermint_addr: &str, tx: Tx) -> Result<Response, Error> {...}\n```\nThe Tx object can be retrieved from the transaction module by calling the `::payload()` method on the transaction object. See [transaction](./transactions.mdx) for more details."
  ],
  "25": [
    "Documentation",
    "QueryNativeToken",
    "QueryBlock",
    "QueryResults",
    "DenominateAmount",
    "AccountModule",
    "GovernanceModule",
    "PgfModule",
    "PosModule",
    "TxModule",
    "TokenBalance",
    "KnownAddress",
    "AccountInfo",
    "PublicKeyRevealed",
    "PublicKeyAt",
    "ProposalById",
    "GovernanceParameters",
    "ProposalVotes",
    "IsSteward",
    "QueryEpoch",
    "QueryEpochAtHeight",
    "IsValidator",
    "IsDelegator",
    "IsDelegatorAt",
    "GetConsensusKeys",
    "GetPosParams",
    "GetAllValidators",
    "GetTotalStakedTokens",
    "GetValidatorStake",
    "GetValidatorState",
    "GetDelegatorsDelegation",
    "GetDelegatorsDelegationAt",
    "QueryCommissionRate",
    "QueryMetadata",
    "QueryIncomingRedelegations",
    "QueryBond",
    "QueryWithdrawableTokens",
    "QueryUnbondWithSlashing",
    "GetBondAmountAt",
    "BondsAndUnbonds",
    "EnrichedBondsAndUnbonds",
    "QueryTxEvents",
    "DryRunTx",
    "QueryTxResponse",
    "QueryTxStatus"
  ]
}