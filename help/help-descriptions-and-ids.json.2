{
"501": [
"osmosisd tx gov submit-legacy-proposal migrate-cw-pool-contracts",
"Submit a migrate cw pool contracts proposal"
],
"502": [
"osmosisd tx gov submit-legacy-proposal param-change",
"Submit a parameter proposal along with an initial deposit. The proposal details must be supplied via a JSON file. For values that contains objects, only non-empty fields will be updated. IMPORTANT: Currently parameter changes are evaluated but not validated, so it is very important that any \"value\" change is valid (ie. correct type and within bounds) for its respective parameter, eg. \"MaxValidators\" should be an integer and not a decimal. Proper vetting of a parameter change proposal should prevent this from happening (no deposits should occur during the governance process), but it should be noted regardless. Example: $ osmosisd tx gov submit-proposal param-change <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Staking Param Change\", \"description\": \"Update max validators\", \"changes\": [ { \"subspace\": \"staking\", \"key\": \"MaxValidators\", \"value\": 105 } ], \"deposit\": \"1000stake\" }"
],
"503": [
"osmosisd tx gov submit-legacy-proposal remove-superfluid-assets-proposal",
"Submit a superfluid asset remove proposal"
],
"504": [
"osmosisd tx gov submit-legacy-proposal replace-migration-records-proposal",
"Submit a replace migration record proposal. Passing in poolIds separated by commas would be parsed automatically to pairs of migration record. Ex) 2,4,1,5 -> [(Balancer 2, CL 4), (Balancer 1, CL 5)]"
],
"505": [
"osmosisd tx gov submit-legacy-proposal replace-pool-incentives",
"Submit a full replacement to the records for pool incentives"
],
"506": [
"osmosisd tx gov submit-legacy-proposal set-scaling-factor-controller-proposal",
"Submit a set scaling factor controller proposal. Sample proposal file: { \"title\": \"Set Scaling Factor Controller Proposal\", \"description\": \"Change scaling factor controller address from osmoXXX to osmoYYY\" \"pool-id\": 1, \"controller-address\": \"osmoYYY\" } >>> osmosisd tx gov submit-proposal set-scaling-factor-controller-proposal \\ --proposal proposal.json \\ --deposit 1600000000uosmo \\ Sample proposal with flags >>> osmosisd tx gov submit-proposal set-scaling-factor-controller-proposal \\ --title \"Set Scaling Factor Controller Proposal\" \\ --summary \"Change scaling factor controller address from osmoXXX to osmoYYY\" --deposit 1600000000uosmo --pool-id 1 --controller-address osmoYYY"
],
"507": [
"osmosisd tx gov submit-legacy-proposal set-superfluid-assets-proposal",
"Submit a superfluid asset set proposal"
],
"508": [
"osmosisd tx gov submit-legacy-proposal software-upgrade",
"Submit a software upgrade along with an initial deposit. Please specify a unique name and height for the upgrade to take effect. You may include info to reference a binary download link, in a format compatible with: https://github.com/cosmos/cosmos-sdk/tree/main/cosmovisor"
],
"509": [
"osmosisd tx gov submit-legacy-proposal tick-spacing-decrease-proposal",
"Submit a tick spacing decrease proposal. Passing in FlagPoolIdToTickSpacingRecords separated by commas would be parsed automatically to pairs of PoolIdToTickSpacing records. Ex) --pool-tick-spacing-records=1,10,5,1 -> [(poolId 1, newTickSpacing 10), (poolId 5, newTickSpacing 1)] Note: The new tick spacing value must be less than the current tick spacing value."
],
"510": [
"osmosisd tx gov submit-legacy-proposal update-client",
"Submit an update IBC client proposal along with an initial deposit. Please specify a subject client identifier you want to update.. Please specify the substitute client the subject client will be updated to."
],
"511": [
"osmosisd tx gov submit-legacy-proposal update-fee-token",
"Submit a update fee token record proposal. Passing in denom,poolID pairs separated by commas would be parsed automatically to pairs of fee token records. Ex) uosmo,1,uion,2,ufoo,0 -> [Adds uosmo<>pool1, uion<>pool2, Removes ufoo as a fee token]"
],
"512": [
"osmosisd tx gov submit-legacy-proposal update-migration-records-proposal",
"Submit a update migration record proposal. Passing in poolIds separated by commas would be parsed automatically to pairs of migration record. Ex) 2,4,1,5 -> [(Balancer 2, CL 4), (Balancer 1, CL 5)]"
],
"513": [
"osmosisd tx gov submit-legacy-proposal update-pool-incentives",
"Submit an update to the records for pool incentives"
],
"514": [
"osmosisd tx gov submit-legacy-proposal update-unpool-whitelist",
"This proposal will update the unpool whitelist if passed. Every pool id must be valid. If the pool id is invalid, the proposal will not be submitted. If the flag to overwrite is set, the whitelist is completely overridden. Otherwise, it is appended to the existing whitelist, having all duplicates removed."
],
"515": [
"osmosisd tx gov submit-legacy-proposal upload-code-id-and-whitelist",
"Submit an upload code id and whitelist proposal"
],
"516": [
"osmosisd tx gov submit-proposal",
"Submit a proposal along with some messages, metadata and deposit. They should be defined in a JSON file. Example: $ osmosisd tx gov submit-proposal path/to/proposal.json Where proposal.json contains: { // array of proto-JSON-encoded sdk.Msgs \"messages\": [ { \"@type\": \"/cosmos.bank.v1beta1.MsgSend\", \"from_address\": \"cosmos1...\", \"to_address\": \"cosmos1...\", \"amount\":[{\"denom\": \"stake\",\"amount\": \"10\"}] } ], \"metadata: \"4pIMOgIGx1vZGU=\", // base64-encoded metadata \"deposit\": \"10stake\" \"title: \"My proposal\" \"summary\": \"A short summary of my proposal\", \"expedited\": false } metadata example: { \"title\": \"\", \"authors\": [\"\"], \"summary\": \"\", \"details\": \"\", \"proposal_forum_url\": \"\", \"vote_option_context\": \"\", }"
],
"517": [
"osmosisd tx gov vote",
"Submit a vote for an active proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd tx gov vote 1 yes --from mykey"
],
"518": [
"osmosisd tx gov weighted-vote",
"Submit a vote for an active proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd tx gov weighted-vote 1 yes=0.6,no=0.3,abstain=0.05,no_with_veto=0.05 --from mykey"
],
"519": [
"osmosisd tx ibc",
"IBC transaction subcommands"
],
"520": [
"osmosisd tx ibc channel",
"IBC channel transaction subcommands"
],
"521": [
"osmosisd tx ibc client",
"IBC client transaction subcommands"
],
"522": [
"osmosisd tx ibc client create",
"create a new IBC client with the specified client state and consensus state - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}"
],
"523": [
"osmosisd tx ibc client misbehaviour",
"submit a client misbehaviour to prevent future updates"
],
"524": [
"osmosisd tx ibc client update",
"update existing client with a client message, for example a header, misbehaviour or batch update"
],
"525": [
"osmosisd tx ibc client upgrade",
"upgrade the IBC client associated with the provided client identifier while providing proof committed by the counterparty chain to the new client and consensus states - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}"
],
"526": [
"osmosisd tx ibc-transfer",
"IBC fungible token transfer transaction subcommands"
],
"527": [
"osmosisd tx ibc-transfer transfer",
"Transfer a fungible token through IBC. Timeouts can be specified as absolute or relative using the \"absolute-timeouts\" flag. Timeout height can be set by passing in the height string in the form {revision}-{height} using the \"packet-timeout-height\" flag. Relative timeout height is added to the block height queried from the latest consensus state corresponding to the counterparty channel. Relative timeout timestamp is added to the greater value of the local clock time and the block timestamp queried from the latest consensus state corresponding to the counterparty channel. Any timeout set to 0 is disabled."
],
"528": [
"osmosisd tx incentives",
"incentives transactions subcommands"
],
"529": [
"osmosisd tx incentives add-to-gauge",
"add coins to gauge to distribute more rewards to users"
],
"530": [
"osmosisd tx incentives create-gauge",
"create a gauge to distribute rewards to users. For duration lock gauges set poolId = 0 and for all CL (no-lock) gauges set it to a CL poolId."
],
"531": [
"osmosisd tx incentives create-group",
"create a group in order to split incentives between pools"
],
"532": [
"osmosisd tx interchain-accounts",
"IBC interchain accounts transaction subcommands"
],
"533": [
"osmosisd tx interchain-accounts controller",
"IBC interchain accounts controller transaction subcommands"
],
"534": [
"osmosisd tx interchain-accounts controller register",
"Register an account on the counterparty chain via the connection id from the source chain. Connection identifier should be for the source chain and the interchain account will be created on the counterparty chain. Callers are expected to provide the appropriate application version string via {version} flag. Generates a new port identifier using the provided owner string, binds to the port identifier and claims the associated capability."
],
"535": [
"osmosisd tx interchain-accounts controller send-tx",
"Submits pre-built packet data containing messages to be executed on the host chain and attempts to send the packet. Packet data is provided as json, file or string. An appropriate relative timeoutTimestamp must be provided with flag {relative-packet-timeout}"
],
"536": [
"osmosisd tx interchain-accounts host",
"IBC interchain accounts host transaction subcommands"
],
"537": [
"osmosisd tx interchain-accounts host generate-packet-data",
"generate-packet-data accepts a message string and serializes it (depending on the encoding parameter) using protobuf or proto3 JSON into packet data which is outputted to stdout. It can be used in conjunction with send-tx which submits pre-built packet data containing messages to be executed on the host chain. The default encoding format is protobuf if none is specified; otherwise the encoding flag can be used in combination with either \"proto3\" or \"proto3json\"."
],
"538": [
"osmosisd tx lockup",
"lockup transactions subcommands"
],
"539": [
"osmosisd tx lockup begin-unlock-by-id",
"begin unlock individual period lock by ID"
],
"540": [
"osmosisd tx lockup begin-unlock-tokens",
"begin unlock not unlocking tokens from lockup pool for sender"
],
"541": [
"osmosisd tx lockup force-unlock-by-id",
"force unlocks individual period lock by ID. if no amount provided, entire lock is unlocked"
],
"542": [
"osmosisd tx lockup lock-tokens",
"lock tokens into lockup pool from user account"
],
"543": [
"osmosisd tx lockup set-reward-receiver-address",
"sets reward receiver address for the designated lock id"
],
"544": [
"osmosisd tx multi-sign",
"Sign transactions created with the --generate-only flag that require multisig signatures. Read one or more signatures from one or more [signature] file, generate a multisig signature compliant to the multisig key [name], and attach the key name to the transaction read from [file]. Example: $ osmosisd tx multisign transaction.json k1k2k3 k1sig.json k2sig.json k3sig.json If --signature-only flag is on, output a JSON representation of only the generated signature. If the --offline flag is on, the client will not reach out to an external node. Account number or sequence number lookups are not performed so you must set these parameters manually. The current multisig implementation defaults to amino-json sign mode. The SIGN_MODE_DIRECT sign mode is not supported.'"
],
"545": [
"osmosisd tx poolmanager",
"poolmanager transactions subcommands"
],
"546": [
"osmosisd tx poolmanager create-pool",
"Must provide path to a pool JSON file (--pool-file) describing the pool to be created"
],
"547": [
"osmosisd tx poolmanager set-denom-pair-taker-fee",
"Allows admin addresses to set the taker fee for a denom pair. Passing in set-denom-pair-taker-fee separated by commas would be parsed automatically to pairs of denomPairTakerFee records. Ex) set-denom-pair-taker-fee uion,uosmo,0.0016,stake,uosmo,0.005,uatom,uosmo,0.0015 -> [uion<>uosmo, takerFee 0.16%] [stake<>uosmo, takerFee 0.5%] [uatom<>uosmo, removes from state since its being set to the default takerFee value]"
],
"548": [
"osmosisd tx poolmanager split-route-swap-exact-amount-in",
"split route swap exact amount in"
],
"549": [
"osmosisd tx poolmanager split-route-swap-exact-amount-out",
"split route swap exact amount out"
],
"550": [
"osmosisd tx poolmanager swap-exact-amount-in",
"swap exact amount in"
],
"551": [
"osmosisd tx poolmanager swap-exact-amount-out",
"swap exact amount out"
],
"552": [
"osmosisd tx protorev",
"protorev transactions subcommands"
],
"553": [
"osmosisd tx protorev set-admin-account-proposal",
"submit a set protorev admin account proposal to set the admin account for x/protorev"
],
"554": [
"osmosisd tx protorev set-base-denoms",
"Must provide a json file with all the base denoms that will be set. Sample json file: [ { \"step_size\" : 10000, \"denom\" : \"uosmo\" }, { \"step_size\" : 10000, \"denom\" : \"atom\" } ]"
],
"555": [
"osmosisd tx protorev set-developer-account",
"set the protorev developer account"
],
"556": [
"osmosisd tx protorev set-enabled-proposal",
"submit a set protorev enabled proposal to enable or disable the protocol"
],
"557": [
"osmosisd tx protorev set-hot-routes",
"Must provide a json file with all of the hot routes that will be set. Sample json file: [ { \"token_in\": \"uosmo\", \"token_out\": \"ibc/123...\", \"arb_routes\" : [ { \"trades\": [ { \"pool\": 1, \"token_in\": \"uosmo\", \"token_out\": \"uatom\" }, { \"pool\": 2, \"token_in\": \"uatom\", \"token_out\": \"ibc/123...\" }, { \"pool\": 0, \"token_in\": \"ibc/123...\", \"token_out\": \"uosmo\" } ], \"step_size\": 1000000 } ] } ]"
],
"558": [
"osmosisd tx protorev set-info-by-pool-type",
"Must provide a json file with all the pool info that will be set. This does NOT set info for a single pool type. All information must be provided across all pool types in the json file. Sample json file: { \"stable\" : { \"weight\" : 1, }, \"concentrated\" : { \"weight\" : 1, \"max_ticks_crossed\": 10, }, \"balancer\" : { \"weight\" : 1, }, \"cosmwasm\" : { \"weight_maps\" : [ {\"contract_address\" : \"cosmos123...\", \"weight\" : 1} ], }, }"
],
"559": [
"osmosisd tx protorev set-max-pool-points-per-block",
"set the max pool points that can be consumed per block"
],
"560": [
"osmosisd tx protorev set-max-pool-points-per-tx",
"set the max pool points that can be consumed per tx"
],
"561": [
"osmosisd tx sign",
"Sign a transaction created with the --generate-only flag. It will read a transaction from [file], sign it, and print its JSON encoding. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only. Full multisig signed transactions may eventually be generated via the 'multisign' command."
],
"562": [
"osmosisd tx sign-batch",
"Sign batch files of transactions generated with --generate-only. The command processes list of transactions from a file (one StdTx each line), or multiple files. Then generates signed transactions or signatures and print their JSON encoding, delimited by '\\n'. As the signatures are generated, the command updates the account and sequence number accordingly. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and the sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The sequence will be incremented automatically for each transaction that is signed. If --account-number or --sequence flag is used when offline=false, they are ignored and overwritten by the default flag values. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only."
],
"563": [
"osmosisd tx slashing",
"Slashing transaction subcommands"
],
"564": [
"osmosisd tx slashing unjail",
"unjail a jailed validator: $ <appd> tx slashing unjail --from mykey"
],
"565": [
"osmosisd tx staking",
"Staking transaction subcommands"
],
"566": [
"osmosisd tx staking cancel-unbond",
"Cancel Unbonding Delegation and delegate back to the validator. Example: $ osmosisd tx staking cancel-unbond osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake 2 --from mykey"
],
"567": [
"osmosisd tx staking create-validator",
"create new validator initialized with a self-delegation to it"
],
"568": [
"osmosisd tx staking delegate",
"Delegate an amount of liquid coins to a validator from your wallet. Example: $ osmosisd tx staking delegate osmovaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 1000stake --from mykey"
],
"569": [
"osmosisd tx staking edit-validator",
"edit an existing validator account"
],
"570": [
"osmosisd tx staking redelegate",
"Redelegate an amount of illiquid staking tokens from one validator to another. Example: $ osmosisd tx staking redelegate osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj osmovaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 100stake --from mykey"
],
"571": [
"osmosisd tx staking unbond",
"Unbond an amount of bonded shares from a validator. Example: $ osmosisd tx staking unbond osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake --from mykey"
],
"572": [
"osmosisd tx superfluid",
"superfluid transactions subcommands"
],
"573": [
"osmosisd tx superfluid add-to-superfluid-cl-position",
"add to an existing superfluid staked concentrated liquidity position"
],
"574": [
"osmosisd tx superfluid create-full-range-position-and-sf-delegate",
"creates a full range concentrated position and superfluid delegates it to the provided validator"
],
"575": [
"osmosisd tx superfluid delegate",
"superfluid delegate a lock to a validator"
],
"576": [
"osmosisd tx superfluid lock-and-superfluid-delegate",
"lock and superfluid delegate"
],
"577": [
"osmosisd tx superfluid unbond-convert-and-stake",
"instantly unbond any locked gamm shares convert them into osmo and stake"
],
"578": [
"osmosisd tx superfluid unbond-lock",
"unbond lock that has been superfluid staked"
],
"579": [
"osmosisd tx superfluid undelegate",
"superfluid undelegate a lock from a validator"
],
"580": [
"osmosisd tx superfluid undelegate-and-unbond-lock",
"superfluid undelegate and unbond lock for the given amount of coin"
],
"581": [
"osmosisd tx superfluid unlock-and-migrate-to-cl",
"unlock and migrate gamm shares to full range concentrated position"
],
"582": [
"osmosisd tx superfluid unpool-whitelisted-pool",
"unpool whitelisted pool"
],
"583": [
"osmosisd tx tokenfactory",
"tokenfactory transactions subcommands"
],
"584": [
"osmosisd tx tokenfactory burn",
"Burn tokens from an address. Must have admin authority to do so."
],
"585": [
"osmosisd tx tokenfactory change-admin",
"Changes the admin address for a factory-created denom. Must have admin authority to do so."
],
"586": [
"osmosisd tx tokenfactory create-denom",
"create a new denom from an account. (Costs osmo though!)"
],
"587": [
"osmosisd tx tokenfactory mint",
"Mint a denom to an address. Must have admin authority to do so."
],
"588": [
"osmosisd tx tokenfactory set-beforesend-hook",
"Set a cosmwasm contract to be the beforesend hook for a factory-created denom. Must have admin authority to do so."
],
"589": [
"osmosisd tx txfees",
"txfees transactions subcommands Usage:"
],
"590": [
"osmosisd tx validate-signatures",
"Print the addresses that must sign the transaction, those who have already signed it, and make sure that signatures are in the correct order. The command would check whether all required signers have signed the transactions, whether the signatures were collected in the right order, and if the signature is valid over the given transaction. If the --offline flag is also set, signature validation over the transaction will be not be performed as that will require RPC communication with a full node."
],
"591": [
"osmosisd tx valsetpref",
"valsetpref transactions subcommands"
],
"592": [
"osmosisd tx valsetpref delegate-valset",
"Delegate tokens to existing valset using delegatorAddress and tokenAmount."
],
"593": [
"osmosisd tx valsetpref redelegate-valset",
"Redelegate tokens from existing validators to new sets of validators"
],
"594": [
"osmosisd tx valsetpref set-valset",
"Creates a new validator set for the delegator with valOperAddress and weight"
],
"595": [
"osmosisd tx valsetpref undelegate-rebalanced-valset",
"Undelegates from an existing valset, but calculates the valset weights based on current user delegations."
],
"596": [
"osmosisd tx valsetpref withdraw-reward-valset",
"Withdraw delegation reward form the new validator set."
],
"597": [
"osmosisd tx vesting",
"Vesting transaction subcommands"
],
"598": [
"osmosisd tx vesting clawback",
"Must be requested by the original funder address (--from). May provide a destination address (--dest), otherwise the coins return to the funder. Delegated or undelegating staking tokens will be transferred in the delegated (undelegating) state. The recipient is vulnerable to slashing, and must act to unbond the tokens if desired."
],
"599": [
"osmosisd tx vesting create-clawback-vesting-account",
"Must provide a lockup periods file (--lockup), a vesting periods file (--vesting), or both. If both files are given, they must describe schedules for the same total amount. If one file is omitted, it will default to a schedule that immediately unlocks or vests the entire amount. The described amount of coins will be transferred from the --from address to the vesting account. Unvested coins may be \"clawed back\" by the funder with the clawback command. Coins may not be transferred out of the account if they are locked or unvested, but may be staked. Staking rewards are subject to a proportional vesting encumbrance. A periods file is a JSON object describing a sequence of unlocking or vesting events, with a start time and an array of coins strings and durations relative to the start or previous event."
],
"600": [
"osmosisd tx vesting create-cliff-vesting-account",
"Create a new delayed vesting account funded with an allocation of tokens. All vesting accouts created will have their start time set by the committed block's time. The cliff duration should be specified in hours."
],
"601": [
"osmosisd tx vesting create-periodic-vesting-account",
"A sequence of coins and period length in seconds. Periods are sequential, in that the duration of of a period only starts at the end of the previous period. The duration of the first period starts upon account creation. For instance, the following periods.json file shows 20 \"test\" coins vesting 30 days apart from each other. Where periods.json contains: An array of coin strings and unix epoch times for coins to vest { \"start_time\": 1625204910, \"periods\":[ { \"coins\": \"10test\", \"length_seconds\":2592000 //30 days }, { \"coins\": \"10test\", \"length_seconds\":2592000 //30 days }, ] }"
],
"602": [
"osmosisd tx vesting create-permanent-locked-account",
"Create a new account funded with an allocation of permanently locked tokens. These tokens may be used for staking but are non-transferable. Staking rewards will acrue as liquid and transferable tokens."
],
"603": [
"osmosisd tx vesting create-vesting-account",
"Create a new vesting account funded with an allocation of tokens. The account can either be a delayed or continuous vesting account, which is determined by the '--delayed' flag. All vesting accounts created will have their start time set by the committed block's time. The end_time must be provided as a UNIX epoch timestamp."
],
"604": [
"osmosisd tx wasm",
"Wasm transaction subcommands"
],
"605": [
"osmosisd tx wasm clear-contract-admin",
"Clears admin for a contract to prevent further migrations"
],
"606": [
"osmosisd tx wasm execute",
"Execute a command on a wasm contract"
],
"607": [
"osmosisd tx wasm grant",
"Grant a authz permission"
],
"608": [
"osmosisd tx wasm grant contract",
"Grant authorization to an address. Examples: $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-calls 1 --no-token-transfer --expiration 1667979596 $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-funds 100000uwasm --expiration 1667979596 $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-calls 5 --max-funds 100000uwasm --expiration 1667979596"
],
"609": [
"osmosisd tx wasm grant store-code",
"Grant authorization to an address. Examples: $ osmosisd tx grant store-code <grantee_addr> 13a1fc994cc6d1c81b746ee0c0ff6f90043875e0bf1d9be6b7d779fc978dc2a5:everybody 1wqrtry681b746ee0c0ff6f90043875e0bf1d9be6b7d779fc978dc2a5:nobody --expiration 1667979596 $ osmosisd tx grant store-code <grantee_addr> *:osmosisd1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm,osmosisd1vx8knpllrj7n963p9ttd80w47kpacrhuts497x"
],
"610": [
"osmosisd tx wasm instantiate",
"Creates a new instance of an uploaded wasm code with the given 'constructor' message. Each contract instance has a unique address assigned. Example: $ osmosisd tx wasm instantiate 1 '{\"foo\":\"bar\"}' --admin=\"$(osmosisd keys show mykey -a)\" \\ --from mykey --amount=\"100ustake\" --label \"local0.1.0\""
],
"611": [
"osmosisd tx wasm instantiate2",
"Creates a new instance of an uploaded wasm code with the given 'constructor' message. Each contract instance has a unique address assigned. They are assigned automatically but in order to have predictable addresses for special use cases, the given 'salt' argument and '--fix-msg' parameters can be used to generate a custom address. Predictable address example (also see 'osmosisd query wasm build-address -h'): $ osmosisd tx wasm instantiate2 1 '{\"foo\":\"bar\"}' $(echo -n \"testing\" | xxd -ps) --admin=\"$(osmosisd keys show mykey -a)\" \\ --from mykey --amount=\"100ustake\" --label \"local0.1.0\" \\ --fix-msg"
],
"612": [
"osmosisd tx wasm migrate",
"Migrate a wasm contract to a new code version"
],
"613": [
"osmosisd tx wasm set-contract-admin",
"Set new admin for a contract"
],
"614": [
"osmosisd tx wasm set-contract-label",
"Set new label for a contract"
],
"615": [
"osmosisd tx wasm store",
"Upload a wasm binary"
],
"616": [
"osmosisd tx wasm submit-proposal",
"Submit a wasm proposal."
],
"617": [
"osmosisd tx wasm submit-proposal add-code-upload-params-addresses",
"Submit an add code upload params addresses proposal to add addresses to code upload config params"
],
"618": [
"osmosisd tx wasm submit-proposal clear-contract-admin",
"Submit a clear admin for a contract to prevent further migrations proposal"
],
"619": [
"osmosisd tx wasm submit-proposal execute-contract",
"Submit a execute wasm contract proposal (run by any address)"
],
"620": [
"osmosisd tx wasm submit-proposal instantiate-contract",
"Submit an instantiate wasm contract proposal"
],
"621": [
"osmosisd tx wasm submit-proposal instantiate-contract-2",
"Submit an instantiate wasm contract proposal with predictable address"
],
"622": [
"osmosisd tx wasm submit-proposal migrate-contract",
"Submit a migrate wasm contract to a new code version proposal"
],
"623": [
"osmosisd tx wasm submit-proposal pin-codes",
"Submit a pin code proposal for pinning a code to cache"
],
"624": [
"osmosisd tx wasm submit-proposal remove-code-upload-params-addresses",
"Submit a remove code upload params addresses proposal to remove addresses from code upload config params"
],
"625": [
"osmosisd tx wasm submit-proposal set-contract-admin",
"Submit a new admin for a contract proposal"
],
"626": [
"osmosisd tx wasm submit-proposal store-instantiate",
"Submit a store and instantiate wasm contract proposal"
],
"627": [
"osmosisd tx wasm submit-proposal store-migrate",
"Submit a store and migrate wasm contract proposal"
],
"628": [
"osmosisd tx wasm submit-proposal sudo-contract",
"Submit a sudo wasm contract proposal (to call privileged commands)"
],
"629": [
"osmosisd tx wasm submit-proposal unpin-codes",
"Submit a unpin code proposal for unpinning a code to cache"
],
"630": [
"osmosisd tx wasm submit-proposal update-instantiate-config",
"Submit an update instantiate config proposal for multiple code ids. Example: $ osmosisd tx gov submit-proposal update-instantiate-config 1:nobody 2:everybody 3:osmo1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm,osmo1vx8knpllrj7n963p9ttd80w47kpacrhuts497x"
],
"631": [
"osmosisd tx wasm submit-proposal wasm-store",
"Submit a wasm binary proposal"
],
"632": [
"osmosisd tx wasm update-instantiate-config",
"Update instantiate config for a codeID"
],
"633": [
"osmosisd update-asset-list",
"Updates asset list used by the CLI to replace ibc denoms with human readable names. Outputs: - cmd/osmosisd/cmd/osmosis-1-assetlist-manual.json for osmosis-1 - cmd/osmosisd/cmd/osmo-test-5-assetlist-manual.json for osmo-test-5"
],
"634": [
"osmosisd validate-genesis",
"validates the genesis file at the default location or at the location passed as an arg"
],
"635": [
"osmosisd version",
"Print the application binary version information"
],
"636": [
"gaiad",
"Stargate Cosmos Hub App"
],
"637": [
"gaiad add-genesis-account",
"Add a genesis account to genesis.json. The provided account must specify the account address or key name and a list of initial coins. If a key name is given, the address will be looked up in the local Keybase. The list of initial tokens must contain valid denominations. Accounts may optionally be supplied with vesting parameters."
],
"638": [
"gaiad collect-gentxs",
"Collect genesis txs and output a genesis.json file"
],
"639": [
"gaiad config",
"Create or query an application CLI configuration file"
],
"640": [
"gaiad debug",
"Tool for helping with debugging your application"
],
"641": [
"gaiad debug addr",
"Convert an address between hex encoding and bech32. Example: $ gaiad debug addr cosmos1e0jnq2sun3dzjh8p2xq95kk0expwmd7shwjpfg"
],
"642": [
"gaiad debug bech32-convert",
"Convert any bech32 string to the cosmos prefix Example: gaiad debug bech32-convert akash1a6zlyvpnksx8wr6wz8wemur2xe8zyh0ytz6d88 gaiad debug bech32-convert stride1673f0t8p893rqyqe420mgwwz92ac4qv6synvx2 --prefix osmo"
],
"643": [
"gaiad debug pubkey",
"Decode a pubkey from proto JSON and display it's address. Example: $ gaiad debug pubkey '{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AurroA7jvfPd1AadmmOvWM2rJSwipXfRf8yD6pLbA2DJ\"}'"
],
"644": [
"gaiad debug raw-bytes",
"Convert raw-bytes to hex. Example: $ gaiad debug raw-bytes [72 101 108 108 111 44 32 112 108 97 121 103 114 111 117 110 100]"
],
"645": [
"gaiad export",
"Export state to JSON"
],
"646": [
"gaiad gentx",
"Generate a genesis transaction that creates a validator with a self-delegation, that is signed by the key in the Keyring referenced by a given name. A node ID and Bech32 consensus pubkey may optionally be provided. If they are omitted, they will be retrieved from the priv_validator.json file. The following default parameters are included: delegation amount: 100000000stake commission rate: 0.1 commission max rate: 0.2 commission max change rate: 0.01 Example: $ gaiad gentx my-key-name 1000000stake --home=/path/to/home/dir --keyring-backend=os --chain-id=test-chain-1 \\ --moniker=\"myvalidator\" \\ --commission-max-change-rate=0.01 \\ --commission-max-rate=1.0 \\ --commission-rate=0.07 \\ --details=\"...\" \\ --security-contact=\"...\" \\ --website=\"...\""
],
"647": [
"gaiad init",
"Initialize validators's and node's configuration files."
],
"648": [
"gaiad keys",
"Keyring management commands. These keys may be in any format supported by the Tendermint crypto library and can be used by light-clients, full nodes, or any other application that needs to sign with a private key. The keyring supports the following backends: os Uses the operating system's default credentials store. file Uses encrypted file-based keystore within the app's configuration directory. This keyring will request a password each time it is accessed, which may occur multiple times in a single command resulting in repeated password prompts. kwallet Uses KDE Wallet Manager as a credentials management application. pass Uses the pass command line utility to store and retrieve keys. test Stores keys insecurely to disk. It does not prompt for a password to be unlocked and it should be use only for testing purposes. kwallet and pass backends depend on external tools. Refer to their respective documentation for more information: KWallet https://github.com/KDE/kwallet pass https://www.passwordstore.org/ The pass backend requires GnuPG: https://gnupg.org/"
],
"649": [
"gaiad keys add",
"Derive a new private key and encrypt to disk. Optionally specify a BIP39 mnemonic, a BIP39 passphrase to further secure the mnemonic, and a bip32 HD path to derive a specific account. The key will be stored under the given name and encrypted with the given password. The only input that is required is the encryption password. If run with -i, it will prompt the user for BIP44 path, BIP39 mnemonic, and passphrase. The flag --recover allows one to recover a key from a seed passphrase. If run with --dry-run, a key would be generated (or recovered) but not stored to the local keystore. Use the --pubkey flag to add arbitrary public keys to the keystore for constructing multisig transactions. You can create and store a multisig key by passing the list of key names stored in a keyring and the minimum number of signatures required through --multisig-threshold. The keys are sorted by address, unless the flag --nosort is set. Example: keys add mymultisig --multisig \"keyname1,keyname2,keyname3\" --multisig-threshold 2"
],
"650": [
"gaiad keys delete",
"Delete keys from the Keybase backend. Note that removing offline or ledger keys will remove only the public key references stored locally, i.e. private keys stored in a ledger device cannot be deleted with the CLI."
],
"651": [
"gaiad keys export",
"Export a private key from the local keyring in ASCII-armored encrypted format. When both the --unarmored-hex and --unsafe flags are selected, cryptographic private key material is exported in an INSECURE fashion that is designed to allow users to import their keys in hot wallets. This feature is for advanced users only that are confident about how to handle private keys work and are FULLY AWARE OF THE RISKS. If you are unsure, you may want to do some research and export your keys in ASCII-armored encrypted format."
],
"652": [
"gaiad keys import",
"Import a ASCII armored private key into the local keybase."
],
"653": [
"gaiad keys list",
"Return a list of all public keys stored by this key manager along with their associated name and address."
],
"654": [
"gaiad keys migrate",
"Migrate key information from the legacy (db-based) Keybase to the new keyring-based Keyring. The legacy Keybase used to persist keys in a LevelDB database stored in a 'keys' sub-directory of the old client application's home directory, e.g. $HOME/.gaiacli/keys/. For each key material entry, the command will prompt if the key should be skipped or not. If the key is not to be skipped, the passphrase must be entered. The key will only be migrated if the passphrase is correct. Otherwise, the command will exit and migration must be repeated. It is recommended to run in 'dry-run' mode first to verify all key migration material."
],
"655": [
"gaiad keys mnemonic",
"Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use --unsafe-entropy"
],
"656": [
"gaiad keys parse",
"Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 cosmos prefixed format and vice versa."
],
"657": [
"gaiad keys show",
"Display keys details. If multiple names or addresses are provided, then an ephemeral multisig key will be created under the name \"multi\" consisting of all the keys provided by name and multisig threshold."
],
"658": [
"gaiad query",
"Querying subcommands"
],
"659": [
"gaiad query account",
"Query for account by address"
],
"660": [
"gaiad query auth",
"Querying commands for the auth module"
],
"661": [
"gaiad query auth account",
"Query for account by address"
],
"662": [
"gaiad query auth accounts",
"Query all the accounts"
],
"663": [
"gaiad query auth module-account",
"Query module account info by module name"
],
"664": [
"gaiad query auth params",
"Query the current auth parameters: $ <appd> query auth params"
],
"665": [
"gaiad query authz",
"Querying commands for the authz module"
],
"666": [
"gaiad query authz grants",
"Query authorization grants for a granter-grantee pair. If msg-type-url is set, it will select grants only for that msg type. Examples: $ gaiad query authz grants cosmos1skj.. cosmos1skjwj.. $ gaiad query authz grants cosmos1skjw.. cosmos1skjwj.. /cosmos.bank.v1beta1.MsgSend"
],
"667": [
"gaiad query authz grants-by-grantee",
"Query authorization grants granted to a grantee. Examples: $ gaiad q authz grants-by-grantee cosmos1skj.."
],
"668": [
"gaiad query authz grants-by-granter",
"Query authorization grants granted by granter. Examples: $ gaiad q authz grants-by-granter cosmos1skj.."
],
"669": [
"gaiad query bank",
"Querying commands for the bank module"
],
"670": [
"gaiad query bank balances",
"Query the total balance of an account or of a specific denomination. Example: $ gaiad query bank balances [address] $ gaiad query bank balances [address] --denom=[denom]"
],
"671": [
"gaiad query bank denom-metadata",
"Query the client metadata for all the registered coin denominations Example: To query for the client metadata of all coin denominations use: $ gaiad query bank denom-metadata To query for the client metadata of a specific coin denomination use: $ gaiad query bank denom-metadata --denom=[denom]"
],
"672": [
"gaiad query bank total",
"Query total supply of coins that are held by accounts in the chain. Example: $ gaiad query bank total To query for the total supply of a specific coin denomination use: $ gaiad query bank total --denom=[denom]"
],
"673": [
"gaiad query block",
"Get verified data for a the block at given height"
],
"674": [
"gaiad query distribution",
"Querying commands for the distribution module"
],
"675": [
"gaiad query distribution commission",
"Query validator commission rewards from delegators to that validator. Example: $ gaiad query distribution commission cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj"
],
"676": [
"gaiad query distribution community-pool",
"Query all coins in the community pool which is under Governance control. Example: $ gaiad query distribution community-pool"
],
"677": [
"gaiad query distribution params",
"Query distribution params"
],
"678": [
"gaiad query distribution rewards",
"Query all rewards earned by a delegator, optionally restrict to rewards from a single validator. Example: $ gaiad query distribution rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p $ gaiad query distribution rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj"
],
"679": [
"gaiad query distribution slashes",
"Query all slashes of a validator for a given block range. Example: $ gaiad query distribution slashes cosmosvalopervaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 0 100"
],
"680": [
"gaiad query distribution tokenize-share-record-rewards",
"Query the query tokenize share record rewards. Example: $ gaiad query distribution tokenize-share-record-rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj"
],
"681": [
"gaiad query distribution validator-outstanding-rewards",
"Query distribution outstanding (un-withdrawn) rewards for a validator and all their delegations. Example: $ gaiad query distribution validator-outstanding-rewards cosmosvaloper1lwjmdnks33xwnmfayc64ycprww49n33mtm92ne"
],
"682": [
"gaiad query feegrant",
"Querying commands for the feegrant module"
],
"683": [
"gaiad query feegrant grant",
"Query details for a grant. You can find the fee-grant of a granter and grantee. Example: $ gaiad query feegrant grant [granter] [grantee]"
],
"684": [
"gaiad query feegrant grants-by-grantee",
"Queries all the grants for a grantee address. Example: $ gaiad query feegrant grants-by-grantee [grantee]"
],
"685": [
"gaiad query feegrant grants-by-granter",
"Queries all the grants issued for a granter address. Example: $ gaiad query feegrant grants-by-granter [granter]"
],
"686": [
"gaiad query globalfee",
"Querying commands for the global fee module"
],
"687": [
"gaiad query globalfee params",
"Show globalfee requirement: minimum_gas_prices, bypass_min_fee_msg_types, max_total_bypass_minFee_msg_gas_usage"
],
"688": [
"gaiad query gov",
"Querying commands for the governance module"
],
"689": [
"gaiad query gov deposit",
"Query details for a single proposal deposit on a proposal by its identifier. Example: $ gaiad query gov deposit 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk"
],
"690": [
"gaiad query gov deposits",
"Query details for all deposits on a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov deposits 1"
],
"691": [
"gaiad query gov param",
"Query the all the parameters for the governance process. Example: $ gaiad query gov param voting $ gaiad query gov param tallying $ gaiad query gov param deposit"
],
"692": [
"gaiad query gov params",
"Query the all the parameters for the governance process. Example: $ gaiad query gov params"
],
"693": [
"gaiad query gov proposal",
"Query details for a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov proposal 1"
],
"694": [
"gaiad query gov proposals",
"Query for a all paginated proposals that match optional filters: Example: $ gaiad query gov proposals --depositor cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ gaiad query gov proposals --voter cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ gaiad query gov proposals --status (DepositPeriod|VotingPeriod|Passed|Rejected) $ gaiad query gov proposals --page=2 --limit=100"
],
"695": [
"gaiad query gov proposer",
"Query which address proposed a proposal with a given ID. Example: $ gaiad query gov proposer 1"
],
"696": [
"gaiad query gov tally",
"Query tally of votes on a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov tally 1"
],
"697": [
"gaiad query gov vote",
"Query details for a single vote on a proposal given its identifier. Example: $ gaiad query gov vote 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk"
],
"698": [
"gaiad query gov votes",
"Query vote details for a single proposal by its identifier. Example: $ gaiad query gov votes 1 $ gaiad query gov votes 1 --page=2 --limit=100"
],
"699": [
"gaiad query ibc",
"Querying commands for the IBC module"
],
"700": [
"gaiad query ibc channel",
"IBC channel query subcommands"
],
"701": [
"gaiad query ibc channel channels",
"Query all channels from a chain"
],
"702": [
"gaiad query ibc channel client-state",
"Query the client state associated with a channel, by providing its port and channel identifiers."
],
"703": [
"gaiad query ibc channel connections",
"Query all channels associated with a connection"
],
"704": [
"gaiad query ibc channel end",
"Query an IBC channel end from a port and channel identifiers"
],
"705": [
"gaiad query ibc channel next-sequence-receive",
"Query the next receive sequence for a given channel"
],
"706": [
"gaiad query ibc channel packet-ack",
"Query a packet acknowledgement"
],
"707": [
"gaiad query ibc channel packet-commitment",
"Query a packet commitment"
],
"708": [
"gaiad query ibc channel packet-commitments",
"Query all packet commitments associated with a channel"
],
"709": [
"gaiad query ibc channel packet-receipt",
"Query a packet receipt"
],
"710": [
"gaiad query ibc channel unreceived-acks",
"Given a list of acknowledgement sequences from counterparty, determine if an ack on the counterparty chain has been received on the executing chain. The return value represents: - Unreceived packet acknowledgement: packet commitment exists on original sending (executing) chain and ack exists on receiving chain."
],
"711": [
"gaiad query ibc channel unreceived-packets",
"Determine if a packet, given a list of packet commitment sequences, is unreceived. The return value represents: - Unreceived packet commitments: no acknowledgement exists on receiving chain for the given packet commitment sequence on sending chain."
],
"712": [
"gaiad query ibc client",
"IBC client query subcommands"
],
"713": [
"gaiad query ibc client consensus-state",
"Query the consensus state for a particular light client at a given height. If the '--latest' flag is included, the query returns the latest consensus state, overriding the height argument."
],
"714": [
"gaiad query ibc client consensus-state-heights",
"Query the heights of all consensus states associated with the provided client ID."
],
"715": [
"gaiad query ibc client consensus-states",
"Query all the consensus states from a given client state."
],
"716": [
"gaiad query ibc client header",
"Query the latest Tendermint header of the running chain"
],
"717": [
"gaiad query ibc client params",
"Query the current ibc client parameters"
],
"718": [
"gaiad query ibc client self-consensus-state",
"Query the self consensus state for this chain. This result may be used for verifying IBC clients representing this chain which are hosted on counterparty chains."
],
"719": [
"gaiad query ibc client state",
"Query stored client state"
],
"720": [
"gaiad query ibc client states",
"Query all available light clients"
],
"721": [
"gaiad query ibc client status",
"Query client activity status. Any client without an 'Active' status is considered inactive"
],
"722": [
"gaiad query ibc connection",
"IBC connection query subcommands"
],
"723": [
"gaiad query ibc connection connections",
"Query all connections ends from a chain"
],
"724": [
"gaiad query ibc connection end",
"Query stored connection end"
],
"725": [
"gaiad query ibc connection path",
"Query stored client connection paths"
],
"726": [
"gaiad query ibc-router",
""
],
"727": [
"gaiad query ibc-router params",
"Query the current ibc-router parameters"
],
"728": [
"gaiad query ibc-transfer",
"IBC fungible token transfer query subcommands"
],
"729": [
"gaiad query ibc-transfer denom-hash",
"Query the denom hash info from a given denom trace"
],
"730": [
"gaiad query ibc-transfer denom-trace",
"Query the denom trace info from a given trace hash or ibc denom"
],
"731": [
"gaiad query ibc-transfer denom-traces",
"Query the trace info for all token denominations"
],
"732": [
"gaiad query ibc-transfer escrow-address",
"Get the escrow address for a channel"
],
"733": [
"gaiad query ibc-transfer params",
"Query the current ibc-transfer parameters"
],
"734": [
"gaiad query interchain-accounts",
"interchain-accounts subcommands"
],
"735": [
"gaiad query interchain-accounts controller",
"interchain-accounts controller subcommands"
],
"736": [
"gaiad query interchain-accounts controller interchain-account",
"Query the controller submodule for the interchain account address for a given owner on a particular connection"
],
"737": [
"gaiad query interchain-accounts controller params",
"Query the current interchain-accounts controller submodule parameters"
],
"738": [
"gaiad query interchain-accounts host",
"interchain-accounts host subcommands"
],
"739": [
"gaiad query interchain-accounts host packet-events",
"Query the interchain-accounts host submodule packet events for a particular channel and sequence"
],
"740": [
"gaiad query interchain-accounts host params",
"Query the current interchain-accounts host submodule parameters"
],
"741": [
"gaiad query liquidity",
"Querying commands for the liquidity module"
],
"742": [
"gaiad query liquidity batch",
"Query details of a liquidity pool batch Example: $ gaiad query liquidity batch 1"
],
"743": [
"gaiad query liquidity deposit",
"Query the deposit messages on the liquidity pool batch for the specified pool-id and msg-index If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed from the beginning of the next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity deposit 1 20"
],
"744": [
"gaiad query liquidity deposits",
"Query all deposit messages of the liquidity pool batch on the specified pool If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity deposits 1"
],
"745": [
"gaiad query liquidity params",
"Query values set as liquidity parameters. Example: $ gaiad query liquidity params"
],
"746": [
"gaiad query liquidity pool",
"Query details of a liquidity pool Example: $ gaiad query liquidity pool 1 Example (with pool coin denom): $ gaiad query liquidity pool --pool-coin-denom=[denom] Example (with reserve acc): $ gaiad query liquidity pool --reserve-acc=[address]"
],
"747": [
"gaiad query liquidity pools",
"Query details about all liquidity pools on a network. Example: $ gaiad query liquidity pools"
],
"748": [
"gaiad query liquidity swap",
"Query for the swap message on the batch of the liquidity pool specified pool-id and msg-index If the batch message are normally processed and from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity swap 1 20"
],
"749": [
"gaiad query liquidity swaps",
"Query all swap messages in the liquidity pool batch for the specified pool-id If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity swaps 1"
],
"750": [
"gaiad query liquidity withdraw",
"Query the withdraw messages in the liquidity pool batch for the specified pool-id and msg-index if the batch message are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity withdraw 1 20"
]
}