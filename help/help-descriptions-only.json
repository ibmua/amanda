{
  "namada": "Namada command line interface.",
  "namada node": "Node sub-commands.",
  "namada node ledger": "Ledger node sub-commands. If no sub-command specified, defaults to run the node.",
  "namada node ledger run": "Run Namada ledger node.",
  "namada node ledger run-until": "Run Namada ledger node until a given height. Then halt or suspend.",
  "namada node ledger reset": "Delete Namada ledger node's and Tendermint node's storage data.",
  "namada node ledger dump-db": "Dump Namada ledger node's DB from a block into a file.",
  "namada node ledger rollback": "Roll Namada state back to the previous height. This command does not create a backup of neither the Namada nor the Tendermint state before execution: for extra safety, it is recommended to make a backup in advance.",
  "namada node config": "Configuration sub-commands.",
  "namada node config gen": "Generate the default configuration file.",
  "namada node config update-local-config": "Update the validator's local configuration.",
  "namada relayer": "Relayer sub-commands.",
  "namada relayer ethereum-bridge-pool": "Functionality for interacting with the Ethereum bridge pool. This pool holds transfers waiting to be relayed to Ethereum.",
  "namada relayer ethereum-bridge-pool construct-proof": "Construct a merkle proof that the given transfers are in the pool.",
  "namada relayer ethereum-bridge-pool query": "Get the contents of the Ethereum Bridge pool.",
  "namada relayer ethereum-bridge-pool query-relayed": "Get the confirmation status of transfers to Ethereum.",
  "namada relayer ethereum-bridge-pool query-signed": "Get the contents of the Ethereum Bridge pool with a signed Merkle root.",
  "namada relayer ethereum-bridge-pool recommend-batch": "Get a recommended batch of transfers from the bridge pool to relay to Ethereum.",
  "namada relayer ethereum-bridge-pool relay-proof": "Construct a merkle proof that the given transfers are in the pool and relay it to Ethereum.",
  "namada relayer validator-set": "Validator set queries, that return data in a format to be consumed by the Namada Ethereum bridge smart contracts.",
  "namada relayer validator-set bridge": "Query the Bridge validator set in Namada, at the given epoch, or the latest one, if none is provided.",
  "namada relayer validator-set governance": "Query the Governance validator set in Namada, at the given epoch, or the latest one, if none is provided.",
  "namada relayer validator-set proof": "Query an Ethereum ABI encoding of a proof of the consensus validator set in Namada, at the requested epoch, or the next one, if no epoch is provided.",
  "namada relayer validator-set relay": "Relay a validator set update to Namada's Ethereum bridge smart contracts.",
  "namada client": "Client sub-commands.",
  "namada client ibc-transfer": "Send a signed IBC transfer transaction.",
  "namada client init-account": "Send a signed transaction to create a new established account.",
  "namada client init-proposal": "Create a new proposal.",
  "namada client reveal-pk": "Submit a tx to reveal the public key an implicit account. Typically, you don't have to do this manually and the client will detect when a tx to reveal PK is needed and submit it automatically. This will write the PK into the account's storage so that it can be used for signature verification on transactions authorized by this account.",
  "namada client transfer": "Send a signed transfer transaction.",
  "namada client tx": "Send a transaction with custom WASM code.",
  "namada client update-account": "Send a signed transaction to update account's validity predicate.",
  "namada client vote-proposal": "Vote a proposal.",
  "namada client become-validator": "Send a signed transaction to become a validator.",
  "namada client bond": "Bond tokens in PoS system.",
  "namada client change-commission-rate": "Change commission rate.",
  "namada client change-consensus-key": "Change consensus key.",
  "namada client change-metadata": "Change validator's metadata, including the commission rate if desired.",
  "namada client claim-rewards": "Claim available rewards tokens from bonds that contributed in consensus.",
  "namada client deactivate-validator": "Send a signed transaction to deactivate a validator.",
  "namada client init-validator": "Send a signed transaction to create an established account and then become a validator.",
  "namada client reactivate-validator": "Send a signed transaction to reactivate an inactive validator.",
  "namada client redelegate": "Redelegate bonded tokens from one validator to another.",
  "namada client unbond": "Unbond tokens from a PoS bond.",
  "namada client unjail-validator": "Send a signed transaction to unjail a jailed validator.",
  "namada client withdraw": "Withdraw tokens from previously unbonded PoS bond.",
  "namada client add-erc20-transfer": "Add a new transfer to the Ethereum Bridge pool.",
  "namada client resign-steward": "Craft a transaction to resign as a steward.",
  "namada client update-steward-rewards": "Update how steward commissions are split.",
  "namada client balance": "Query balance(s) of tokens.",
  "namada client block": "Query the last committed block.",
  "namada client bonded-stake": "Query PoS bonded stake.",
  "namada client bonds": "Query PoS bond(s).",
  "namada client commission-rate": "Query a validator's commission rate.",
  "namada client conversions": "Query currently applicable conversions.",
  "namada client delegations": "Find PoS delegations from the given owner address.",
  "namada client epoch": "Query the epoch of the last committed block.",
  "namada client find-validator": "Find a PoS validator and its consensus key by its native address or Tendermint address.",
  "namada client masp-reward-tokens": "Query the tokens which can earn MASP rewards while shielded.",
  "namada client next-epoch-info": "Query some info to help discern when the next epoch will begin.",
  "namada client query-account": "Query the substorage space of a specific enstablished address.",
  "namada client query-bytes": "Query the raw bytes of a given storage key",
  "namada client query-pgf": "Query pgf stewards and continuous funding.",
  "namada client query-proposal": "Query proposals.",
  "namada client query-proposal-result": "Query proposals result.",
  "namada client query-proposal-votes": "Query votes for the proposal.",
  "namada client query-protocol-parameters": "Query protocol parameters.",
  "namada client rewards": "Query the latest rewards available to claim for a given delegation (or self-bond).",
  "namada client show-transfers": "Query the accepted transfers to date.",
  "namada client slashes": "Query PoS applied slashes.",
  "namada client status": "Query the node's status.",
  "namada client tx-result": "Query the result of a transaction.",
  "namada client validator-metadata": "Query a validator's metadata.",
  "namada client validator-state": "Query the state of a PoS validator.",
  "namada client ibc-gen-shielded": "Generate shielded transfer for IBC.",
  "namada client shielded-sync": "Sync the local shielded context with MASP notes owned by the provided viewing / spending keys up to an optional specified block height.",
  "namada client sign-tx": "Sign a transaction offline.",
  "namada client utils": "Utilities.",
  "namada client utils join-network": "Configure Namada to join an existing network.",
  "namada client utils fetch-wasms": "Ensure pre-built wasms are present",
  "namada client utils validate-wasm": "Check that the provided wasm code is valid by the Namada standards.",
  "namada client utils init-network": "Initialize a new test network.",
  "namada client utils derive-genesis-addresses": "Derive account addresses from a genesis txs toml file.",
  "namada client utils genesis-bond": "Bond to a validator at pre-genesis.",
  "namada client utils init-genesis-established-account": "Initialize an established account available at genesis.",
  "namada client utils init-genesis-validator": "Initialize genesis validator's address, consensus key and validator account key and use it in the ledger's node. Appends validator creation and self-bond txs to a .toml file containing an established account tx.",
  "namada client utils pk-to-tm": "Convert a validator's consensus public key to a Tendermint address.",
  "namada client utils default-base-dir": "Print the default base directory that would be used if --base-dir or NAMADA_BASE_DIR were not used to set the base directory.",
  "namada client utils epoch-sleep": "Query for the current epoch, then sleep until the next epoch.",
  "namada client utils validate-genesis-templates": "Validate genesis templates.",
  "namada client utils test-genesis": "Dry run genesis files and get a report on problems that may be found.",
  "namada client utils sign-genesis-txs": "Sign genesis transaction(s).",
  "namada wallet": "Wallet sub-commands.",
  "namada wallet gen": "In the transparent setting, generates a keypair with a given alias and derives the implicit address from its public key. The address will be stored with the same alias. In the shielded setting, generates a new spending key with a given alias. In both settings, by default, an HD-key with a default derivation path is generated, with a random mnemonic code.",
  "namada wallet derive": "In the transparent setting, derives a keypair from the given mnemonic code and HD derivation path and derives the implicit address from its public key. Stores the keypair and the address with the given alias. In the shielded setting, derives a spending key. A hardware wallet can be used, in which case the private key is not derivable.",
  "namada wallet gen-payment-addr": "Generates a payment address from the given spending key.",
  "namada wallet list": "In the transparent setting, list known keypairs and addresses. In the shielded setting, list known spending / viewing keys and payment addresses.",
  "namada wallet find": "In the transparent setting, searches for a keypair / address by a given alias, public key, or a public key hash. Looks up an alias of the given address. In the shielded setting, searches for a spending / viewing key and payment address by a given alias. Looks up an alias of the given payment address.",
  "namada wallet export": "Exports a transparent keypair / shielded spending key to a file.",
  "namada wallet convert": "Convert to tendermint priv_validator_key.json with your consensus key alias",
  "namada wallet import": "Imports a transparent keypair / shielded spending key from a file.",
  "namada wallet add": "Adds the given key or address to the wallet.",
  "namada wallet remove": "Remove the given alias and all associated keys / addresses from the wallet.",
  "namada ethereum-bridge-pool": "Functionality for interacting with the Ethereum bridge pool. This pool holds transfers waiting to be relayed to Ethereum.",
  "namada ethereum-bridge-pool construct-proof": "Construct a merkle proof that the given transfers are in the pool.",
  "namada ethereum-bridge-pool query": "Get the contents of the Ethereum Bridge pool.",
  "namada ethereum-bridge-pool query-relayed": "Get the confirmation status of transfers to Ethereum.",
  "namada ethereum-bridge-pool query-signed": "Get the contents of the Ethereum Bridge pool with a signed Merkle root.",
  "namada ethereum-bridge-pool recommend-batch": "Get a recommended batch of transfers from the bridge pool to relay to Ethereum.",
  "namada ethereum-bridge-pool relay-proof": "Construct a merkle proof that the given transfers are in the pool and relay it to Ethereum.",
  "namada ledger": "Ledger node sub-commands. If no sub-command specified, defaults to run the node.",
  "namada ledger run": "Run Namada ledger node.",
  "namada ledger run-until": "Run Namada ledger node until a given height. Then halt or suspend.",
  "namada ledger reset": "Delete Namada ledger node's and Tendermint node's storage data.",
  "namada ledger dump-db": "Dump Namada ledger node's DB from a block into a file.",
  "namada ledger rollback": "Roll Namada state back to the previous height. This command does not create a backup of neither the Namada nor the Tendermint state before execution: for extra safety, it is recommended to make a backup in advance.",
  "namada tx": "Send a transaction with custom WASM code.",
  "namada transfer": "Send a signed transfer transaction.",
  "namada ibc-transfer": "Send a signed IBC transfer transaction.",
  "namada update-account": "Send a signed transaction to update account's validity predicate.",
  "namada init-proposal": "Create a new proposal.",
  "namada vote-proposal": "Vote a proposal.",
  "namada reveal-pk": "Submit a tx to reveal the public key an implicit account. Typically, you don't have to do this manually and the client will detect when a tx to reveal PK is needed and submit it automatically. This will write the PK into the account's storage so that it can be used for signature verification on transactions authorized by this account.",
  "osmosisd": "Start osmosis app",
  "osmosisd add-genesis-account": "Add a genesis account to genesis.json. The provided account must specify the account address or key name and a list of initial coins. If a key name is given, the address will be looked up in the local Keybase. The list of initial tokens must contain valid denominations. Accounts may optionally be supplied with vesting parameters.",
  "osmosisd collect-gentxs": "Collect genesis txs and output a genesis.json file",
  "osmosisd config": "Create or query an application CLI configuration file",
  "osmosisd debug": "Tool for helping with debugging your application",
  "osmosisd debug addr": "Convert an address between hex encoding and bech32. Example: $ osmosisd debug addr cosmos1e0jnq2sun3dzjh8p2xq95kk0expwmd7shwjpfg",
  "osmosisd debug bech32-convert": "Convert any bech32 string to the osmo prefix Especially useful for converting cosmos addresses to osmo addresses Example: osmosisd bech32-convert cosmos1ey69r37gfxvxg62sh4r0ktpuc46pzjrmz29g45",
  "osmosisd debug prefixes": "List prefixes used in Bech32 addresses.",
  "osmosisd debug proto-marshalled-bytes": "Convert request proto struct into proto marshalled bytes. Especially useful when debugging proto marshalled bytes or debugging stargate queries Example: osmosisd debug proto-marshalled-bytes \"/cosmos.bank.v1beta1.Query/Balance\" bank QueryBalanceRequest \"osmo1t7egva48prqmzl59x5ngv4zx0dtrwewc9m7z44\" stake",
  "osmosisd debug pubkey": "Decode a pubkey from proto JSON and display it's address. Example: $ osmosisd debug pubkey '{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AurroA7jvfPd1AadmmOvWM2rJSwipXfRf8yD6pLbA2DJ\"}'",
  "osmosisd debug pubkey-raw": "Decode a pubkey from hex, base64, or bech32. Example: $ osmosisd debug pubkey-raw TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz $ osmosisd debug pubkey-raw cosmos1e0jnq2sun3dzjh8p2xq95kk0expwmd7shwjpfg",
  "osmosisd debug raw-bytes": "Convert raw-bytes to hex. Example: $ osmosisd debug raw-bytes [72 101 108 108 111 44 32 112 108 97 121 103 114 111 117 110 100]",
  "osmosisd enable-cli-autocomplete": "To configure your shell to load completions for each session, add to your profile: # bash example echo '. <(osmosisd enable-cli-autocomplete bash)' >> ~/.bash_profile source ~/.bash_profile # zsh example echo '. <(osmosisd enable-cli-autocomplete zsh)' >> ~/.zshrc source ~/.zshrc",
  "osmosisd export": "Export state to JSON",
  "osmosisd export-derive-balances": "Export a derive balances from a provided genesis export Example: osmosisd export-derive-balances ../genesis.json ../snapshot.json",
  "osmosisd forceprune": "Forceprune option prunes and compacts blockstore.db and state.db. One needs to shut down chain before running forceprune. By default it keeps last 188000 blocks (approximately 2 weeks of data) blockstore and state db (validator and consensus information) and 1000 blocks of abci responses from state.db. Everything beyond these heights in blockstore and state.db is pruned. ABCI Responses are stored in index db and so redundant especially if one is running pruned nodes. As a result we are removing ABCI data from state.db aggressively by default. One can override height for blockstore.db and state.db by using -f option and for abci response by using -m option. Example: osmosisd forceprune -f 188000 -m 1000, which would keep blockchain and state data of last 188000 blocks (approximately 2 weeks) and ABCI responses of last 1000 blocks.",
  "osmosisd gentx": "Generate a genesis transaction that creates a validator with a self-delegation, that is signed by the key in the Keyring referenced by a given name. A node ID and Bech32 consensus pubkey may optionally be provided. If they are omitted, they will be retrieved from the priv_validator.json file. The following default parameters are included: delegation amount: 100000000stake commission rate: 0.1 commission max rate: 0.2 commission max change rate: 0.01 minimum self delegation: 1 Example: $ osmosisd gentx my-key-name 1000000stake --home=/path/to/home/dir --keyring-backend=os --chain-id=test-chain-1 \\ --moniker=\"myvalidator\" \\ --commission-max-change-rate=0.01 \\ --commission-max-rate=1.0 \\ --commission-rate=0.07 \\ --details=\"...\" \\ --security-contact=\"...\" \\ --website=\"...\"",
  "osmosisd get-env": "Prints the current environment Example: osmosisd get-env' Returns one of: - mainnet implying $HOME/.osmosisd - testnet implying $HOME/.osmosisd-test - localosmosis implying $HOME/.osmosisd-local - custom path",
  "osmosisd in-place-testnet": "Create and start a testnet from current local state. After utilizing this command the network will start. If the network is stopped, the normal \"start\" command should be used. Re-using this command on state that has already been modified by this command could result in unexpected behavior. Additionally, the first block may take up to one minute to be committed, depending on how old the block is. For instance, if a snapshot was taken weeks ago and we want to turn this into a testnet, it is possible lots of pending state needs to be committed (expiring locks, etc.). It is recommended that you should wait for this block to be committed before stopping the daemon. If the --trigger-testnet-upgrade flag is set, the upgrade handler specified by the flag will be run on the first block of the testnet. Regardless of whether the flag is set or not, if any new stores are introduced in the daemon being run, those stores will be registered in order to prevent panics. Therefore, you only need to set the flag if you want to test the upgrade handler itself.",
  "osmosisd init": "Initialize validators's and node's configuration files.",
  "osmosisd keys": "Keyring management commands. These keys may be in any format supported by the Tendermint crypto library and can be used by light-clients, full nodes, or any other application that needs to sign with a private key. The keyring supports the following backends: os Uses the operating system's default credentials store. file Uses encrypted file-based keystore within the app's configuration directory. This keyring will request a password each time it is accessed, which may occur multiple times in a single command resulting in repeated password prompts. kwallet Uses KDE Wallet Manager as a credentials management application. pass Uses the pass command line utility to store and retrieve keys. test Stores keys insecurely to disk. It does not prompt for a password to be unlocked and it should be use only for testing purposes. kwallet and pass backends depend on external tools. Refer to their respective documentation for more information: KWallet https://github.com/KDE/kwallet pass https://www.passwordstore.org/ The pass backend requires GnuPG: https://gnupg.org/",
  "osmosisd keys add": "Derive a new private key and encrypt to disk. Optionally specify a BIP39 mnemonic, a BIP39 passphrase to further secure the mnemonic, and a bip32 HD path to derive a specific account. The key will be stored under the given name and encrypted with the given password. The only input that is required is the encryption password. If run with -i, it will prompt the user for BIP44 path, BIP39 mnemonic, and passphrase. The flag --recover allows one to recover a key from a seed passphrase. If run with --dry-run, a key would be generated (or recovered) but not stored to the local keystore. Use the --pubkey flag to add arbitrary public keys to the keystore for constructing multisig transactions. You can create and store a multisig key by passing the list of key names stored in a keyring and the minimum number of signatures required through --multisig-threshold. The keys are sorted by address, unless the flag --nosort is set. Example: keys add mymultisig --multisig \"keyname1,keyname2,keyname3\" --multisig-threshold 2",
  "osmosisd keys delete": "Delete keys from the Keybase backend. Note that removing offline or ledger keys will remove only the public key references stored locally, i.e. private keys stored in a ledger device cannot be deleted with the CLI.",
  "osmosisd keys export": "Export a private key from the local keyring in ASCII-armored encrypted format. When both the --unarmored-hex and --unsafe flags are selected, cryptographic private key material is exported in an INSECURE fashion that is designed to allow users to import their keys in hot wallets. This feature is for advanced users only that are confident about how to handle private keys work and are FULLY AWARE OF THE RISKS. If you are unsure, you may want to do some research and export your keys in ASCII-armored encrypted format.",
  "osmosisd keys import": "Import a ASCII armored private key into the local keybase.",
  "osmosisd keys import-hex": "Import hex encoded private key into the local keybase. Supported key-types can be obtained with: osmosisd list-key-types",
  "osmosisd keys list": "Return a list of all public keys stored by this key manager along with their associated name and address.",
  "osmosisd keys list-key-types": "Return a list of all supported key types (also known as algos)",
  "osmosisd keys migrate": "Migrate keys from Amino to Protocol Buffers records. For each key material entry, the command will check if the key can be deserialized using proto. If this is the case, the key is already migrated. Therefore, we skip it and continue with a next one. Otherwise, we try to deserialize it using Amino into LegacyInfo. If this attempt is successful, we serialize LegacyInfo to Protobuf serialization format and overwrite the keyring entry. If any error occurred, it will be outputted in CLI and migration will be continued until all keys in the keyring DB are exhausted. See https://github.com/cosmos/cosmos-sdk/pull/9695 for more details. It is recommended to run in 'dry-run' mode first to verify all key migration material.",
  "osmosisd keys mnemonic": "Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use --unsafe-entropy",
  "osmosisd keys parse": "Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 cosmos prefixed format and vice versa.",
  "osmosisd keys rename": "Rename a key from the Keybase backend. Note that renaming offline or ledger keys will rename only the public key references stored locally, i.e. private keys stored in a ledger device cannot be renamed with the CLI.",
  "osmosisd keys show": "Display keys details. If multiple names or addresses are provided, then an ephemeral multisig key will be created under the name \"multi\" consisting of all the keys provided by name and multisig threshold.",
  "osmosisd list-env": "listing all available environments. Example: osmosisd list-env' Returns all EnvironmentCmd",
  "osmosisd migrate": "Migrate the source genesis into the target version and print to STDOUT. Example: $ osmosisd migrate v0.36 /path/to/genesis.json --chain-id=cosmoshub-3 --genesis-time=2019-04-22T17:00:00Z",
  "osmosisd prepare-genesis": "Prepare a genesis file with initial setup. Examples include: - Setting module initial params - Setting denom metadata Example: osmosisd prepare-genesis mainnet osmosis-1 - Check input genesis: file is at ~/.osmosisd/config/genesis.json",
  "osmosisd query": "Querying subcommands",
  "osmosisd query account": "Query for account by address",
  "osmosisd query auth": "Querying commands for the auth module",
  "osmosisd query auth account": "Query for account by address",
  "osmosisd query auth accounts": "Query all the accounts",
  "osmosisd query auth address-by-acc-num": "Query for an address by account number",
  "osmosisd query auth module-account": "Query module account info by module name",
  "osmosisd query auth module-accounts": "Query all module accounts",
  "osmosisd query auth params": "Query the current auth parameters: $ <appd> query auth params",
  "osmosisd query authz": "Querying commands for the authz module",
  "osmosisd query authz grants": "Query authorization grants for a granter-grantee pair. If msg-type-url is set, it will select grants only for that msg type. Examples: $ osmosisd query authz grants cosmos1skj.. cosmos1skjwj.. $ osmosisd query authz grants cosmos1skjw.. cosmos1skjwj.. /cosmos.bank.v1beta1.MsgSend",
  "osmosisd query authz grants-by-grantee": "Query authorization grants granted to a grantee. Examples: $ osmosisd q authz grants-by-grantee cosmos1skj..",
  "osmosisd query authz grants-by-granter": "Query authorization grants granted by granter. Examples: $ osmosisd q authz grants-by-granter cosmos1skj..",
  "osmosisd query bank": "Querying commands for the bank module",
  "osmosisd query bank balances": "Query the total balance of an account or of a specific denomination. Example: $ osmosisd query bank balances [address] $ osmosisd query bank balances [address] --denom=[denom]",
  "osmosisd query bank denom-metadata": "Query the client metadata for all the registered coin denominations Example: To query for the client metadata of all coin denominations use: $ osmosisd query bank denom-metadata To query for the client metadata of a specific coin denomination use: $ osmosisd query bank denom-metadata --denom=[denom]",
  "osmosisd query bank send-enabled": "Query for send enabled entries that have been specifically set. To look up one or more specific denoms, supply them as arguments to this command. To look up all denoms, do not provide any arguments.",
  "osmosisd query bank spendable-balances": "Query for account spendable balances by address",
  "osmosisd query bank total": "Query total supply of coins that are held by accounts in the chain. Example: $ osmosisd query bank total To query for the total supply of a specific coin denomination use: $ osmosisd query bank total --denom=[denom]",
  "osmosisd query block": "Get verified data for the block at given height",
  "osmosisd query concentratedliquidity": "Querying commands for the concentratedliquidity module",
  "osmosisd query concentratedliquidity cfmm-pool-link-from-cl": "Query cfmm pool id link from concentrated pool id Example: $ osmosisd q concentratedliquidity cfmm-pool-link-from-cl 1",
  "osmosisd query concentratedliquidity claimable-incentives": "Query claimable incentives Example: $ osmosisd q concentratedliquidity claimable-incentives 53",
  "osmosisd query concentratedliquidity claimable-spread-rewards": "Query claimable spread rewards Example: $ osmosisd q concentratedliquidity claimable-spread-rewards 53",
  "osmosisd query concentratedliquidity incentive-records": "Query incentive records for a given pool Example: $ osmosisd q concentratedliquidity incentive-records 1",
  "osmosisd query concentratedliquidity liquidity-net-in-direction": "Query liquidity net in direction Example: $ osmosisd q concentratedliquidity 4 uosmo \"[-18000000]\" true \"[-9000000]\" true [poolid] [inputDenom] [start tick] [use cur tick] [bound tick] [use_no_bound] TODO: What does any of that mean...?",
  "osmosisd query concentratedliquidity liquidity-per-tick-range": "Query liquidity per tick range Example: $ osmosisd q concentratedliquidity 1 [poolid]",
  "osmosisd query concentratedliquidity params": "Get the params for the x/concentratedliquidity module",
  "osmosisd query concentratedliquidity pool-accumulator-rewards": "Query pool accumulator rewards Example: $ osmosisd q concentratedliquidity pool-accumulator-rewards 1",
  "osmosisd query concentratedliquidity pools": "Query pools Example: $ osmosisd q concentratedliquidity pools",
  "osmosisd query concentratedliquidity position-by-id": "Query position by ID Example: $ osmosisd q concentratedliquidity position-by-id 53",
  "osmosisd query concentratedliquidity tick-accumulator-trackers": "Query tick accumulator trackers Example: $ osmosisd q concentratedliquidity tick-accumulator-trackers 1 \"[-18000000]\"",
  "osmosisd query concentratedliquidity user-positions": "Query user's positions Example: $ osmosisd q concentratedliquidity user-positions osmo12smx2wdlyttvyzvzg54y2vnqwq2qjateuf7thj",
  "osmosisd query cosmwasmpool": "Querying commands for the cosmwasmpool module",
  "osmosisd query cosmwasmpool contract-info": "Query contract info by pool id Example: $ osmosisd q cosmwasmpool pools",
  "osmosisd query cosmwasmpool params": "Get the params for the x/cosmwasmpool module",
  "osmosisd query cosmwasmpool pools": "Query pools Example: $ osmosisd q cosmwasmpool pools",
  "osmosisd query distribution": "Querying commands for the distribution module",
  "osmosisd query distribution commission": "Query validator commission rewards from delegators to that validator. Example: $ osmosisd query distribution commission osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query distribution community-pool": "Query all coins in the community pool which is under Governance control. Example: $ osmosisd query distribution community-pool",
  "osmosisd query distribution params": "Query distribution params",
  "osmosisd query distribution rewards": "Query all rewards earned by a delegator, optionally restrict to rewards from a single validator. Example: $ osmosisd query distribution rewards osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p $ osmosisd query distribution rewards osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query distribution slashes": "Query all slashes of a validator for a given block range. Example: $ osmosisd query distribution slashes osmovalopervaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 0 100",
  "osmosisd query distribution validator-distribution-info": "Query validator distribution info. Example: $ osmosisd query distribution validator-distribution-info osmovaloper1lwjmdnks33xwnmfayc64ycprww49n33mtm92ne",
  "osmosisd query distribution validator-outstanding-rewards": "Query distribution outstanding (un-withdrawn) rewards for a validator and all their delegations. Example: $ osmosisd query distribution validator-outstanding-rewards osmovaloper1lwjmdnks33xwnmfayc64ycprww49n33mtm92ne",
  "osmosisd query downtimedetector": "Querying commands for the downtimedetector module",
  "osmosisd query downtimedetector recovered-since": "Queries if it has been at least <recovery-duration> since the chain was down for <downtime-duration> downtime-duration is a duration, but is restricted to a smaller set. Heres a few from the set: 30s, 1m, 5m, 10m, 30m, 1h, 3 h, 6h, 12h, 24h, 36h, 48h] Example: $ osmosisd q downtimedetector recovered-since 24h 30m",
  "osmosisd query epochs": "Querying commands for the epochs module",
  "osmosisd query epochs current-epoch": "Query current epoch by specified identifier. Example: $ osmosisd q epochs day",
  "osmosisd query epochs epoch-infos": "Query running epoch infos. Example: $ osmosisd q epochs",
  "osmosisd query evidence": "Query for specific submitted evidence by hash or query for all (paginated) evidence: Example: $ osmosisd query evidence DF0C23E8634E480F84B9D5674A7CDC9816466DEC28A3358F73260F68D28D7660 $ osmosisd query evidence --page=2 --limit=50",
  "osmosisd query gamm": "Querying commands for the gamm module",
  "osmosisd query gamm cfmm-cl-pool-links": "Query all concentrated pool and cfmm pool id links Example: $ osmosisd q gamm cfmm-cl-pool-links",
  "osmosisd query gamm cl-pool-link-from-cfmm": "Query concentrated pool id link from cfmm pool id Example: $ osmosisd q gamm cl-pool-link-from-cfmm 1",
  "osmosisd query gamm estimate-swap-exact-amount-in": "Query estimate-swap-exact-amount-in. Example: $ osmosisd q gamm estimate-swap-exact-amount-in 1 osm11vmx8jtggpd9u7qr0t8vxclycz85u925sazglr7 1000stake --swap-route-pool-ids=2 --swap-route-pool-ids=3",
  "osmosisd query gamm estimate-swap-exact-amount-out": "Query estimate-swap-exact-amount-out. Example: $ osmosisd q gamm estimate-swap-exact-amount-out 1 osm11vmx8jtggpd9u7qr0t8vxclycz85u925sazglr7 1000stake --swap-route-pool-ids=2 --swap-route-pool-ids=3",
  "osmosisd query gamm num-pools": "Query number of pools",
  "osmosisd query gamm pool": "Query pool Example: $ osmosisd q gamm pool 1",
  "osmosisd query gamm pool-params": "Query pool-params. Example: $ osmosisd query gamm pool-params 1",
  "osmosisd query gamm pool-type": "Query pool type Example: $ osmosisd q gamm pool-type <pool_id>",
  "osmosisd query gamm pools": "Query pools Example: $ osmosisd q gamm pools",
  "osmosisd query gamm pools-with-filter": "Query pools with filter. The possible filter options are: 1. By Pool type: Either \"Balancer\" or \"Stableswap\" 2. By min pool liquidity by providing min coins Note that if both filters are to be applied, \"min_liquidity\" always needs to be provided as the first argument. Example: $ osmosisd query gamm pools-with-filter <min_liquidity> <pool_type>",
  "osmosisd query gamm spot-price": "Query spot price (Legacy). Example: $ osmosisd q gamm spot-price 1 uosmo ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2",
  "osmosisd query gamm total-liquidity": "Query total-liquidity. Example: $ osmosisd q gamm total-liquidity",
  "osmosisd query gamm total-pool-liquidity": "Query total-pool-liquidity. Example: $ osmosisd q gamm total-pool-liquidity 1",
  "osmosisd query gamm total-share": "Query total-share. Example: $ osmosisd q gamm total-share 1",
  "osmosisd query gov": "Querying commands for the governance module",
  "osmosisd query gov deposit": "Query details for a single proposal deposit on a proposal by its identifier. Example: $ osmosisd query gov deposit 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk",
  "osmosisd query gov deposits": "Query details for all deposits on a proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd query gov deposits 1",
  "osmosisd query gov param": "Query the all the parameters for the governance process. Example: $ osmosisd query gov param voting $ osmosisd query gov param tallying $ osmosisd query gov param deposit",
  "osmosisd query gov params": "Query the all the parameters for the governance process. Example: $ osmosisd query gov params",
  "osmosisd query gov proposal": "Query details for a proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd query gov proposal 1",
  "osmosisd query gov proposals": "Query for a all paginated proposals that match optional filters: Example: $ osmosisd query gov proposals --depositor cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ osmosisd query gov proposals --voter cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ osmosisd query gov proposals --status (DepositPeriod|VotingPeriod|Passed|Rejected) $ osmosisd query gov proposals --page=2 --limit=100",
  "osmosisd query gov proposer": "Query which address proposed a proposal with a given ID. Example: $ osmosisd query gov proposer 1",
  "osmosisd query gov tally": "Query tally of votes on a proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd query gov tally 1",
  "osmosisd query gov vote": "Query details for a single vote on a proposal given its identifier. Example: $ osmosisd query gov vote 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk",
  "osmosisd query gov votes": "Query vote details for a single proposal by its identifier. Example: $ osmosisd query gov votes 1 $ osmosisd query gov votes 1 --page=2 --limit=100",
  "osmosisd query ibc": "Querying commands for the IBC module",
  "osmosisd query ibc channel": "IBC channel query subcommands",
  "osmosisd query ibc channel channels": "Query all channels from a chain",
  "osmosisd query ibc channel client-state": "Query the client state associated with a channel, by providing its port and channel identifiers.",
  "osmosisd query ibc channel connections": "Query all channels associated with a connection",
  "osmosisd query ibc channel end": "Query an IBC channel end from a port and channel identifiers",
  "osmosisd query ibc channel next-sequence-receive": "Query the next receive sequence for a given channel",
  "osmosisd query ibc channel packet-ack": "Query a packet acknowledgement",
  "osmosisd query ibc channel packet-commitment": "Query a packet commitment",
  "osmosisd query ibc channel packet-commitments": "Query all packet commitments associated with a channel",
  "osmosisd query ibc channel packet-receipt": "Query a packet receipt",
  "osmosisd query ibc channel unreceived-acks": "Given a list of acknowledgement sequences from counterparty, determine if an ack on the counterparty chain has been received on the executing chain. The return value represents: - Unreceived packet acknowledgement: packet commitment exists on original sending (executing) chain and ack exists on receiving chain.",
  "osmosisd query ibc channel unreceived-packets": "Determine if a packet, given a list of packet commitment sequences, is unreceived. The return value represents: - Unreceived packet commitments: no acknowledgement exists on receiving chain for the given packet commitment sequence on sending chain.",
  "osmosisd query ibc client": "IBC client query subcommands",
  "osmosisd query ibc client consensus-state": "Query the consensus state for a particular light client at a given height. If the '--latest' flag is included, the query returns the latest consensus state, overriding the height argument.",
  "osmosisd query ibc client consensus-state-heights": "Query the heights of all consensus states associated with the provided client ID.",
  "osmosisd query ibc client consensus-states": "Query all the consensus states from a given client state.",
  "osmosisd query ibc client header": "Query the latest Tendermint header of the running chain",
  "osmosisd query ibc client params": "Query the current ibc client parameters",
  "osmosisd query ibc client self-consensus-state": "Query the self consensus state for this chain. This result may be used for verifying IBC clients representing this chain which are hosted on counterparty chains.",
  "osmosisd query ibc client state": "Query stored client state",
  "osmosisd query ibc client states": "Query all available light clients",
  "osmosisd query ibc client status": "Query client activity status. Any client without an 'Active' status is considered inactive",
  "osmosisd query ibc connection": "IBC connection query subcommands",
  "osmosisd query ibc connection connections": "Query all connections ends from a chain",
  "osmosisd query ibc connection end": "Query stored connection end",
  "osmosisd query ibc connection params": "Query the current ibc connection parameters",
  "osmosisd query ibc connection path": "Query stored client connection paths",
  "osmosisd query ibc-transfer": "IBC fungible token transfer query subcommands",
  "osmosisd query ibc-transfer denom-hash": "Query the denom hash info from a given denom trace",
  "osmosisd query ibc-transfer denom-trace": "Query the denom trace info from a given trace hash or ibc denom",
  "osmosisd query ibc-transfer denom-traces": "Query the trace info for all token denominations",
  "osmosisd query ibc-transfer escrow-address": "Get the escrow address for a channel",
  "osmosisd query ibc-transfer params": "Query the current ibc-transfer parameters",
  "osmosisd query ibc-transfer total-escrow": "Query the total amount of tokens in escrow for a denom",
  "osmosisd query ibchooks": "Querying commands for the ibchooks module",
  "osmosisd query ibchooks wasm-sender": "Generate the local address for a wasm hooks sender. Example: $ osmosisd query ibc-hooks wasm-hooks-sender channel-42 juno12smx2wdlyttvyzvzg54y2vnqwq2qjatezqwqxu",
  "osmosisd query incentives": "Querying commands for the incentives module",
  "osmosisd query incentives active-gauges": "Query active gauges",
  "osmosisd query incentives active-gauges-per-denom": "Query active gauges per denom Example: $ osmosisd q incentives active-gauges-per-denom gamm/pool/1",
  "osmosisd query incentives all-groups": "Query all groups",
  "osmosisd query incentives all-groups-gauges": "Query all group gauges",
  "osmosisd query incentives all-groups-with-gauge": "Query all groups with their respective group gauge",
  "osmosisd query incentives current-weight-by-group-gauge-id": "Query current incentives distribution weight since epoch for each gauge respectively from a group gauge ID",
  "osmosisd query incentives gauge-by-id": "Query gauge by id. Example: $ osmosisd q incentives gauge-by-id 1",
  "osmosisd query incentives gauges": "Query all available gauges",
  "osmosisd query incentives group-by-group-gauge-id": "Query a group it's respective group gauge ID",
  "osmosisd query incentives rewards-estimation": "Query rewards estimation. Example: $ osmosisd query incentives rewards-estimation",
  "osmosisd query incentives to-distribute-coins": "Query coins that is going to be distributed",
  "osmosisd query incentives upcoming-gauges": "Query upcoming gauges",
  "osmosisd query incentives upcoming-gauges-per-denom": "Query scheduled gauges per denom",
  "osmosisd query interchain-accounts": "IBC interchain accounts query subcommands",
  "osmosisd query interchain-accounts controller": "IBC interchain accounts controller query subcommands",
  "osmosisd query interchain-accounts controller interchain-account": "Query the controller submodule for the interchain account address for a given owner on a particular connection",
  "osmosisd query interchain-accounts controller params": "Query the current interchain-accounts controller submodule parameters",
  "osmosisd query interchain-accounts host": "IBC interchain accounts host query subcommands",
  "osmosisd query interchain-accounts host packet-events": "Query the interchain-accounts host submodule packet events for a particular channel and sequence",
  "osmosisd query interchain-accounts host params": "Query the current interchain-accounts host submodule parameters",
  "osmosisd query interchainquery": "Querying commands for the interchainquery module",
  "osmosisd query interchainquery params": "Query the current parameters",
  "osmosisd query lockup": "Querying commands for the lockup module",
  "osmosisd query lockup account-locked-beforetime": "Query account's unlocked records before specific time Timestamp is UNIX time in seconds. Example: $ osmosisd q lockup account-locked-pastime <address> <timestamp>",
  "osmosisd query lockup account-locked-coins": "Query account's locked coins Example: $ osmosisd q lockup account-locked-coins <address>",
  "osmosisd query lockup account-locked-duration": "Query account locked records with a specific duration Example: $ osmosisd q lockup account-locked-duration osmo1yl6hdjhmkf37639730gffanpzndzdpmhxy9ep3 604800s",
  "osmosisd query lockup account-locked-longer-duration": "Query account locked records with longer duration",
  "osmosisd query lockup account-locked-longer-duration-denom": "Query locked records for a denom with longer duration",
  "osmosisd query lockup account-locked-longer-duration-not-unlocking": "Query account locked records with longer duration from unlocking only queue",
  "osmosisd query lockup account-locked-pastime": "Query locked records of an account with unlock time beyond timestamp Example: $ osmosisd q lockup account-locked-pastime <address> <timestamp>",
  "osmosisd query lockup account-locked-pastime-denom": "Query account's lock records by address, timestamp, denom Timestamp is UNIX time in seconds. Example: $ osmosisd q lockup account-locked-pastime-denom <address> <timestamp> <denom>",
  "osmosisd query lockup account-locked-pastime-not-unlocking": "Query locked records of an account with unlock time beyond timestamp within not unlocking queue. Timestamp is UNIX time in seconds. Example: $ osmosisd q lockup account-locked-pastime-not-unlocking <address> <timestamp>",
  "osmosisd query lockup account-unlockable-coins": "Query account's unlockable coins. Example: $ osmosisd query lockup account-unlockable-coins <address>",
  "osmosisd query lockup account-unlocking-coins": "Query account's unlocking coins Example: $ osmosisd q lockup account-unlocking-coins <address>",
  "osmosisd query lockup lock-by-id": "Query account's lock record by id Example: $ osmosisd q lockup lock-by-id 1",
  "osmosisd query lockup lock-reward-receiver": "Query lock's reward receiver Example: $ osmosisd q lockup lock-reward-receiver 1",
  "osmosisd query lockup module-balance": "Query module balance",
  "osmosisd query lockup module-locked-amount": "Query locked amount",
  "osmosisd query lockup next-lock-id": "Query next lock id to be created",
  "osmosisd query lockup output-all-locks": "Output all locks into a json file. Example: $ osmosisd query lockup output-all-locks <max lock ID>",
  "osmosisd query lockup params": "Get the params for the x/lockup module",
  "osmosisd query lockup synthetic-lockup-by-lock-id": "Query synthetic lock by underlying lockup id",
  "osmosisd query lockup synthetic-lockups-by-lock-id": "Query synthetic lockups by lockup id (is deprecated for synthetic-lockup-by-lock-id)",
  "osmosisd query lockup total-locked-of-denom": "Example: $ osmosisd q lockup total-locked-of-denom uosmo --min-duration=0s",
  "osmosisd query mint": "Querying commands for the mint module",
  "osmosisd query mint epoch-provisions": "Query the current minting epoch provisions value",
  "osmosisd query mint params": "Query the current minting parameters",
  "osmosisd query packetforward": "Querying commands for the packetforward module",
  "osmosisd query packetforward params": "Query the current packetforward parameters",
  "osmosisd query params": "Querying commands for the params module",
  "osmosisd query params subspace": "Query for raw parameters by subspace and key",
  "osmosisd query poolincentives": "Querying commands for the poolincentives module",
  "osmosisd query poolincentives distr-info": "Query distribution info Example: $ osmosisd q poolincentives distr-info",
  "osmosisd query poolincentives external-incentivized-gauges": "Query external incentivized gauges Example: $ osmosisd q poolincentives external-incentivized-gauges",
  "osmosisd query poolincentives gauge-ids": "Query the matching gauge ids and durations by pool id Example: $ osmosisd q poolincentives gauge-ids 1",
  "osmosisd query poolincentives incentivized-pools": "Query incentivized pools. Example: $ osmosisd q poolincentives incentivized-pools",
  "osmosisd query poolincentives lockable-durations": "Query distribution info. Example: $ osmosisd q poolincentives lockable-durations",
  "osmosisd query poolincentives params": "Get the params for the x/poolincentives module",
  "osmosisd query poolmanager": "Querying commands for the poolmanager module",
  "osmosisd query poolmanager all-pools": "Query all pools on the Osmosis chain",
  "osmosisd query poolmanager estimate-single-pool-swap-exact-amount-in": "Query estimate-single-pool-swap-exact-amount-in. Example: $ osmosisd q poolmanager estimate-single-pool-swap-exact-amount-in 1 1000stake uosmo",
  "osmosisd query poolmanager estimate-single-pool-swap-exact-amount-out": "Query estimate-single-pool-swap-exact-amount-out. Example: $ osmosisd q poolmanager estimate-single-pool-swap-exact-amount-out 1 uosmo 1000stake",
  "osmosisd query poolmanager estimate-swap-exact-amount-in": "Query estimate-swap-exact-amount-in. Example: $ osmosisd q poolmanager estimate-swap-exact-amount-in 1000stake --swap-route-pool-ids=2 --swap-route-pool-ids=3",
  "osmosisd query poolmanager estimate-swap-exact-amount-out": "Query estimate-swap-exact-amount-out. Example: $ osmosisd q poolmanager estimate-swap-exact-amount-out 1000stake --swap-route-pool-ids=2 --swap-route-pool-ids=3",
  "osmosisd query poolmanager estimate-trade-based-on-price-impact": "Query estimate-trade-based-on-price-impact $ osmosisd q poolmanager estimate-trade-based-on-price-impact 100uosmo stosmo 833 0.001 1.00",
  "osmosisd query poolmanager list-pools-by-denom": "Query list-pools-by-denom $ osmosisd q poolmanager list-pools-by-denom uosmo",
  "osmosisd query poolmanager num-pools": "Query number of pools",
  "osmosisd query poolmanager params": "Get the params for the x/poolmanager module",
  "osmosisd query poolmanager pool": "Query pool Example: $ osmosisd q poolmanager pool 1",
  "osmosisd query poolmanager spot-price": "Query spot-price $ osmosisd q poolmanager spot-price 1 uosmo ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2",
  "osmosisd query poolmanager total-pool-liquidity": "Query total-pool-liquidity $ osmosisd q poolmanager total-pool-liquidity 1",
  "osmosisd query poolmanager total-volume-for-pool": "Query total-volume-for-pool $ osmosisd q poolmanager total-volume-for-pool 1",
  "osmosisd query poolmanager trading-pair-taker-fee": "Query trading pair taker fee $ osmosisd q poolmanager trading-pair-taker-fee uosmo uatom",
  "osmosisd query protorev": "Querying commands for the protorev module",
  "osmosisd query protorev admin-account": "Query the admin account",
  "osmosisd query protorev all-profits": "Query all ProtoRev profits",
  "osmosisd query protorev all-proto-rev": "Query protocol revenue across all modules",
  "osmosisd query protorev all-statistics": "Query all ProtoRev statistics",
  "osmosisd query protorev base-denoms": "Query the base denoms used to construct arbitrage routes",
  "osmosisd query protorev developer-account": "Query the developer account",
  "osmosisd query protorev enabled": "Query whether protorev is currently enabled",
  "osmosisd query protorev hot-routes": "Query the ProtoRev hot routes currently being used",
  "osmosisd query protorev info-by-pool-type": "Query the pool info used to determine how computationally expensive a route is",
  "osmosisd query protorev max-pool-points-per-block": "Query the max pool points per block",
  "osmosisd query protorev max-pool-points-per-tx": "Query the max pool points per tx",
  "osmosisd query protorev number-of-trades": "Query the number of cyclic arbitrage trades protorev has executed",
  "osmosisd query protorev params": "Query the module params",
  "osmosisd query protorev pool": "Query the pool id for a given denom pair stored via the highest liquidity method in ProtoRev",
  "osmosisd query protorev profits-by-denom": "Query the profits of protorev by denom Example:$ osmosisd q protorev profits-by-denom uosmo",
  "osmosisd query protorev statistics-by-route": "Query statistics about a specific arbitrage route Example:$ osmosisd q protorev statistics-by-route [1,2,3]",
  "osmosisd query rate-limited-ibc": "Querying commands for the rate-limited-ibc module",
  "osmosisd query rate-limited-ibc params": "Get the params for the x/rate-limited-ibc module",
  "osmosisd query slashing": "Querying commands for the slashing module",
  "osmosisd query slashing params": "Query genesis parameters for the slashing module: $ <appd> query slashing params",
  "osmosisd query slashing signing-info": "Use a validators' consensus public key to find the signing-info for that validator: $ <appd> query slashing signing-info '{\"@type\":\"/cosmos.crypto.ed25519.PubKey\",\"key\":\"OauFcTKbN5Lx3fJL689cikXBqe+hcp6Y+x0rYUdR9Jk=\"}'",
  "osmosisd query slashing signing-infos": "signing infos of validators: $ <appd> query slashing signing-infos",
  "osmosisd query staking": "Querying commands for the staking module",
  "osmosisd query staking delegation": "Query delegations for an individual delegator on an individual validator. Example: $ osmosisd query staking delegation osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking delegations": "Query delegations for an individual delegator on all validators. Example: $ osmosisd query staking delegations osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "osmosisd query staking delegations-to": "Query delegations on an individual validator. Example: $ osmosisd query staking delegations-to osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking historical-info": "Query historical info at given height. Example: $ osmosisd query staking historical-info 5",
  "osmosisd query staking params": "Query values set as staking parameters. Example: $ osmosisd query staking params",
  "osmosisd query staking pool": "Query values for amounts stored in the staking pool. Example: $ osmosisd query staking pool",
  "osmosisd query staking redelegation": "Query a redelegation record for an individual delegator between a source and destination validator. Example: $ osmosisd query staking redelegation osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p osmovaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking redelegations": "Query all redelegation records for an individual delegator. Example: $ osmosisd query staking redelegation osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "osmosisd query staking redelegations-from": "Query delegations that are redelegating _from_ a validator. Example: $ osmosisd query staking redelegations-from osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking unbonding-delegation": "Query unbonding delegations for an individual delegator on an individual validator. Example: $ osmosisd query staking unbonding-delegation osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking unbonding-delegations": "Query unbonding delegations for an individual delegator. Example: $ osmosisd query staking unbonding-delegations osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "osmosisd query staking unbonding-delegations-from": "Query delegations that are unbonding _from_ a validator. Example: $ osmosisd query staking unbonding-delegations-from osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking validator": "Query details about an individual validator. Example: $ osmosisd query staking validator osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "osmosisd query staking validators": "Query details about all validators on a network. Example: $ osmosisd query staking validators",
  "osmosisd query superfluid": "Querying commands for the superfluid module",
  "osmosisd query superfluid all-intermediary-accounts": "Query all superfluid intermediary accounts",
  "osmosisd query superfluid all-superfluid-assets": "Query all superfluid assets",
  "osmosisd query superfluid asset-multiplier": "Query asset multiplier by denom Example: $ osmosisd q superfluid asset-multiplier gamm/pool/1",
  "osmosisd query superfluid connected-intermediary-account": "Query connected intermediary account Example: $ osmosisd q superfluid connected-intermediary-account 1",
  "osmosisd query superfluid params": "Query parameters for the superfluid module: $ <appd> query superfluid params",
  "osmosisd query superfluid superfluid-delegation-amount": "Query coins superfluid delegated for a delegator, validator, denom",
  "osmosisd query superfluid superfluid-delegation-by-delegator": "Query coins superfluid delegated for the specified delegator",
  "osmosisd query superfluid superfluid-undelegation-by-delegator": "Query coins superfluid undelegated for the specified delegator",
  "osmosisd query superfluid total-delegation-by-delegator": "Query both superfluid delegation and normal delegation",
  "osmosisd query superfluid total-superfluid-delegations": "Query total amount of osmo delegated via superfluid staking",
  "osmosisd query superfluid unpool-whitelist": "Query whitelisted pool ids to unpool",
  "osmosisd query tendermint-validator-set": "Get the full tendermint validator set at given height",
  "osmosisd query tokenfactory": "Querying commands for the tokenfactory module",
  "osmosisd query tokenfactory denom-authority-metadata": "Get the authority metadata for a specific denom Example: $ osmosisd q tokenfactory uatom",
  "osmosisd query tokenfactory denoms-from-creator": "Returns a list of all tokens created by a specific creator address Example: $ osmosisd q tokenfactory <address>",
  "osmosisd query tokenfactory params": "Get the params for the x/tokenfactory module",
  "osmosisd query twap": "Querying commands for the twap module",
  "osmosisd query twap arithmetic": "Query arithmetic twap for pool. Start time must be unix time. End time can be unix time or duration. Example: $ osmosisd q twap arithmetic 1 uosmo 1667088000 24h $ osmosisd q twap arithmetic 1 uosmo 1667088000 1667174400",
  "osmosisd query twap geometric": "Query geometric twap for pool. Start time must be unix time. End time can be unix time or duration. Example: $ osmosisd q twap geometric 1 uosmo 1667088000 24h $ osmosisd q twap geometric 1 uosmo 1667088000 1667174400",
  "osmosisd query tx": "Example: $ osmosisd query tx <hash> $ osmosisd query tx --type=acc_seq <addr>/<sequence> $ osmosisd query tx --type=signature <sig1_base64>,<sig2_base64...>",
  "osmosisd query txfees": "Querying commands for the txfees module",
  "osmosisd query txfees base-denom": "Query the base fee denom Example: $ osmosisd q txfees base-denom",
  "osmosisd query txfees base-fee": "Query the eip base fee. Example: $ osmosisd q txfees base-fee",
  "osmosisd query txfees denom-pool-id": "Query the pool id associated with a specific whitelisted fee token Example: $ osmosisd q txfees denom-pool-id [denom]",
  "osmosisd query txfees fee-tokens": "Query the list of non-basedenom fee tokens and their associated pool ids Example: $ osmosisd q txfees fee-tokens",
  "osmosisd query txs": "Search for transactions that match the exact given events where results are paginated. Each event takes the form of '{eventType}.{eventAttribute}={value}'. Please refer to each module's documentation for the full set of events to query for. Each module documents its respective events under 'xx_events.md'. Example: $ osmosisd query txs --events 'message.sender=cosmos1...&message.action=withdraw_delegator_reward' --page 1 --limit 30",
  "osmosisd query upgrade": "Querying commands for the upgrade module",
  "osmosisd query upgrade applied": "If upgrade-name was previously executed on the chain, this returns the header for the block at which it was applied. This helps a client determine which binary was valid over a given range of blocks, as well as more context to understand past migrations.",
  "osmosisd query upgrade module_versions": "Gets a list of module names and their respective consensus versions. Following the command with a specific module name will return only that module's information.",
  "osmosisd query upgrade plan": "Gets the currently scheduled upgrade plan, if one exists",
  "osmosisd query valsetpref": "Querying commands for the valsetpref module",
  "osmosisd query valsetpref val-set": "Query the validator set for a specific user address",
  "osmosisd query wasm": "Querying commands for the wasm module",
  "osmosisd query wasm build-address": "build contract address",
  "osmosisd query wasm code": "Downloads wasm bytecode for given code id",
  "osmosisd query wasm code-info": "Prints out metadata of a code id",
  "osmosisd query wasm contract": "Prints out metadata of a contract given its address",
  "osmosisd query wasm contract-history": "Prints out the code history for a contract given its address",
  "osmosisd query wasm contract-state": "Querying commands for the wasm module",
  "osmosisd query wasm contract-state all": "Prints out all internal state of a contract given its address",
  "osmosisd query wasm contract-state raw": "Prints out internal state for of a contract given its address",
  "osmosisd query wasm contract-state smart": "Calls contract with given address with query data and prints the returned result",
  "osmosisd query wasm libwasmvm-version": "Get libwasmvm version",
  "osmosisd query wasm list-code": "List all wasm bytecode on the chain",
  "osmosisd query wasm list-contract-by-code": "List wasm all bytecode on the chain for given code id",
  "osmosisd query wasm list-contracts-by-creator": "List all contracts by creator",
  "osmosisd query wasm params": "Query the current wasm parameters",
  "osmosisd query wasm pinned": "List all pinned code ids",
  "osmosisd rollback": "A state rollback is performed to recover from an incorrect application state transition, when Tendermint has persisted an incorrect app hash and is thus unable to make progress. Rollback overwrites a state at height n with the state at height n - 1. The application also rolls back to height n - 1. No blocks are removed, so upon restarting Tendermint the transactions in block n will be re-executed against the application.",
  "osmosisd rosetta": "spin up a rosetta server",
  "osmosisd set-env": "Set home environment variables for commands Example: osmosisd set-env mainnet osmosisd set-env testnet osmosisd set-env localnet [optional-chain-id] osmosisd set-env $HOME/.custom-dir",
  "osmosisd staked-to-csv": "Export a airdrop csv from a provided balances export (from export-derive-balances) Example: osmosisd staked-to-csv ../balances.json ../airdrop.csv",
  "osmosisd start": "Run the full node application with Tendermint in or out of process. By default, the application will run with Tendermint in process. Pruning options can be provided via the '--pruning' flag or alternatively with '--pruning-keep-recent', and 'pruning-interval' together. For '--pruning' the options are as follows: default: the last 362880 states are kept, pruning at 10 block intervals nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node) everything: 2 latest states will be kept; pruning at 10 block intervals. custom: allow pruning options to be manually specified through 'pruning-keep-recent', and 'pruning-interval' Node halting configurations exist in the form of two flags: '--halt-height' and '--halt-time'. During the ABCI Commit phase, the node will check if the current block height is greater than or equal to the halt-height or if the current block time is greater than or equal to the halt-time. If so, the node will attempt to gracefully shutdown and the block will not be committed. In addition, the node will not be able to commit subsequent blocks. For profiling and benchmarking purposes, CPU profiling can be enabled via the '--cpu-profile' flag which accepts a path for the resulting pprof file. The node may be started in a 'query only' mode where only the gRPC and JSON HTTP API services are enabled via the 'grpc-only' flag. In this mode, Tendermint is bypassed and can be used when legacy queries are needed after an on-chain upgrade is performed. Note, when enabled, gRPC will also be automatically enabled.",
  "osmosisd status": "Query remote node for status",
  "osmosisd tendermint": "Tendermint subcommands",
  "osmosisd tendermint bootstrap-state": "Bootstrap CometBFT state at an arbitrary block height using a light client",
  "osmosisd tendermint reset-state": "Remove all the data and WAL",
  "osmosisd tendermint show-address": "Shows this node's tendermint validator consensus address",
  "osmosisd tendermint show-node-id": "Show this node's ID",
  "osmosisd tendermint show-validator": "Show this node's tendermint validator info",
  "osmosisd tendermint unsafe-reset-all": "(unsafe) Remove all the data and WAL, reset this node's validator to genesis state",
  "osmosisd tendermint version": "Print protocols' and libraries' version numbers against which this app has been compiled.",
  "osmosisd testnet": "testnet will create \"v\" number of directories and populate each with necessary files (private validator, genesis, config, etc.). Note, strict routability for addresses is turned off in the config file. Example: osmosisd testnet --v 4 --output-dir ./output --starting-ip-address 192.168.10.2",
  "osmosisd tx": "Transactions subcommands",
  "osmosisd tx authz": "Authorize and revoke access to execute transactions on behalf of your address",
  "osmosisd tx authz exec": "execute tx on behalf of granter account: Example: $ osmosisd tx authz exec tx.json --from grantee $ osmosisd tx bank send <granter> <recipient> --from <granter> --chain-id <chain-id> --generate-only > tx.json && osmosisd tx authz exec tx.json --from grantee",
  "osmosisd tx authz grant": "create a new grant authorization to an address to execute a transaction on your behalf: Examples: $ osmosisd tx authz grant cosmos1skjw.. send --spend-limit=1000stake --from=cosmos1skl.. $ osmosisd tx authz grant cosmos1skjw.. generic --msg-type=/cosmos.gov.v1.MsgVote --from=cosmos1sk..",
  "osmosisd tx authz revoke": "revoke authorization from a granter to a grantee: Example: $ osmosisd tx authz revoke cosmos1skj.. /cosmos.bank.v1beta1.MsgSend --from=cosmos1skj..",
  "osmosisd tx bank": "Bank transaction subcommands",
  "osmosisd tx bank multi-send": "Send funds from one account to two or more accounts. By default, sends the [amount] to each address of the list. Using the '--split' flag, the [amount] is split equally between the addresses. Note, the '--from' flag is ignored as it is implied from [from_key_or_address] and separate addresses with space. When using '--dry-run' a key name cannot be used, only a bech32 address.",
  "osmosisd tx bank send": "Send funds from one account to another. Note, the '--from' flag is ignored as it is implied from [from_key_or_address]. When using '--dry-run' a key name cannot be used, only a bech32 address.",
  "osmosisd tx broadcast": "Broadcast transactions created with the --generate-only flag and signed with the sign command. Read a transaction from [file_path] and broadcast it to a node. If you supply a dash (-) argument in place of an input filename, the command reads from standard input. $ <appd> tx broadcast ./mytxn.json",
  "osmosisd tx concentratedliquidity": "concentratedliquidity transactions subcommands",
  "osmosisd tx concentratedliquidity add-to-position": "add to an existing concentrated liquidity position",
  "osmosisd tx concentratedliquidity collect-incentives": "collect incentives from liquidity position(s)",
  "osmosisd tx concentratedliquidity collect-spread-rewards": "collect spread rewards from liquidity position(s)",
  "osmosisd tx concentratedliquidity create-pool": "denom-1 (the quote denom), tick spacing, and spread factors must all be authorized by the concentrated liquidity module",
  "osmosisd tx concentratedliquidity create-position": "create or add to existing concentrated liquidity position",
  "osmosisd tx concentratedliquidity fungify-positions": "Combine fully charged positions within the same range into a new single fully charged position",
  "osmosisd tx concentratedliquidity transfer-positions": "transfer a list of concentrated liquidity positions to a new owner",
  "osmosisd tx concentratedliquidity withdraw-position": "withdraw from an existing concentrated liquidity position",
  "osmosisd tx cosmwasmpool": "cosmwasmpool transactions subcommands",
  "osmosisd tx cosmwasmpool create-pool": "create a cosmwasm pool",
  "osmosisd tx crisis": "Crisis transactions subcommands",
  "osmosisd tx crisis invariant-broken": "Submit proof that an invariant broken to halt the chain",
  "osmosisd tx decode": "Decode a binary encoded transaction string",
  "osmosisd tx distribution": "Distribution transactions subcommands",
  "osmosisd tx distribution fund-community-pool": "Funds the community pool with the specified amount Example: $ osmosisd tx distribution fund-community-pool 100uatom --from mykey",
  "osmosisd tx distribution set-withdraw-addr": "Set the withdraw address for rewards associated with a delegator address. Example: $ osmosisd tx distribution set-withdraw-addr osmo1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p --from mykey",
  "osmosisd tx distribution withdraw-all-rewards": "Withdraw all rewards for a single delegator. Note that if you use this command with --broadcast-mode=sync or --broadcast-mode=async, the max-msgs flag will automatically be set to 0. Example: $ osmosisd tx distribution withdraw-all-rewards --from mykey",
  "osmosisd tx distribution withdraw-rewards": "Withdraw rewards from a given delegation address, and optionally withdraw validator commission if the delegation address given is a validator operator. Example: $ osmosisd tx distribution withdraw-rewards osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey $ osmosisd tx distribution withdraw-rewards osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey --commission",
  "osmosisd tx encode": "Encode transactions created with the --generate-only flag or signed with the sign command. Read a transaction from <file>, serialize it to the Protobuf wire protocol, and output it as base64. If you supply a dash (-) argument in place of an input filename, the command reads from standard input.",
  "osmosisd tx evidence": "Evidence transaction subcommands",
  "osmosisd tx gamm": "gamm transactions subcommands",
  "osmosisd tx gamm adjust-scaling-factors": "adjust scaling factors",
  "osmosisd tx gamm create-pool": "Must provide path to a pool JSON file (--pool-file) describing the pool to be created Sample pool JSON file contents for balancer: { \"weights\": \"4uatom,4osmo,2uakt\", \"initial-deposit\": \"100uatom,5osmo,20uakt\", \"swap-fee\": \"0.01\", \"exit-fee\": \"0.01\", \"future-governor\": \"168h\" } For stableswap (demonstrating need for a 1:1000 scaling factor, see doc) { \"initial-deposit\": \"1000000uusdc,1000miliusdc\", \"swap-fee\": \"0.01\", \"exit-fee\": \"0.00\", \"future-governor\": \"168h\", \"scaling-factors\": \"1000,1\" }",
  "osmosisd tx gamm exit-pool": "exit a new pool and withdraw the liquidity from it",
  "osmosisd tx gamm exit-swap-extern-amount-out": "exit swap extern amount out",
  "osmosisd tx gamm exit-swap-share-amount-in": "exit swap share amount in",
  "osmosisd tx gamm join-pool": "join a new pool and provide the liquidity to it",
  "osmosisd tx gamm join-swap-extern-amount-in": "join swap extern amount in",
  "osmosisd tx gamm join-swap-share-amount-out": "join swap share amount out",
  "osmosisd tx gamm swap-exact-amount-in": "swap exact amount in",
  "osmosisd tx gamm swap-exact-amount-out": "swap exact amount out",
  "osmosisd tx gov": "Governance transactions subcommands",
  "osmosisd tx gov deposit": "Submit a deposit for an active proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd tx gov deposit 1 10stake --from mykey",
  "osmosisd tx gov draft-proposal": "Generate a draft proposal json file. The generated proposal json contains only one message (skeleton).",
  "osmosisd tx gov submit-legacy-proposal": "Submit a legacy proposal along with an initial deposit. Proposal title, description, type and deposit can be given directly or through a proposal JSON file. Example: $ osmosisd tx gov submit-legacy-proposal --proposal=\"path/to/proposal.json\" --from mykey Where proposal.json contains: { \"title\": \"Test Proposal\", \"description\": \"My awesome proposal\", \"type\": \"Text\", \"deposit\": \"10test\" } Which is equivalent to: $ osmosisd tx gov submit-legacy-proposal --title=\"Test Proposal\" --description=\"My awesome proposal\" --type=\"Text\" --deposit=\"10test\" --from mykey",
  "osmosisd tx gov submit-legacy-proposal cancel-software-upgrade": "Cancel a software upgrade along with an initial deposit.",
  "osmosisd tx gov submit-legacy-proposal create-cl-pool-and-cfmm-link": "submit a proposal to create CL pool and link to Balancer pool.",
  "osmosisd tx gov submit-legacy-proposal create-concentratedliquidity-pool-proposal": "Submit a create concentrated liquidity pool proposal. Passing in FlagPoolRecords separated by commas would be parsed automatically to pairs of pool records. Ex) --pool-records=uion,uosmo,100,0.003,stake,uosmo,1000,0.005 -> [uion<>uosmo, tickSpacing 100, spreadFactor 0.3%] [stake<>uosmo, tickSpacing 1000, spreadFactor 0.5%]",
  "osmosisd tx gov submit-legacy-proposal create-groups-proposal": "Submit a create groups proposal. Passing in pool-id-pairs separated by commas would be parsed automatically to a single set for a single group. If a semicolon is presented, that would be parsed as pool IDs for separate group. Don't forget the single quotes around the pool IDs! Ex) create-groups-proposal '1,2;3,4,5;6,7' -> Group 1: Pool IDs 1, 2 Group 2: Pool IDs 3, 4, 5 Group 3: Pool IDs 6, 7",
  "osmosisd tx gov submit-legacy-proposal denom-pair-taker-fee-proposal": "Submit a denom pair taker fee proposal. Passing in denom-pairs-with-taker-fee separated by commas would be parsed automatically to pairs of denomPairTakerFee records. Ex) denom-pair-taker-fee-proposal uion,uosmo,0.0016,stake,uosmo,0.005,uatom,uosmo,0.0015 -> [uion<>uosmo, takerFee 0.16%] [stake<>uosmo, takerFee 0.5%] [uatom<>uosmo, removes from state since its being set to the default takerFee value]",
  "osmosisd tx gov submit-legacy-proposal ibc-upgrade": "Submit an IBC client breaking upgrade proposal along with an initial deposit. The client state specified is the upgraded client state representing the upgraded chain Example Upgraded Client State JSON: { \"@type\":\"/ibc.lightclients.tendermint.v1.ClientState\", \"chain_id\":\"testchain1\", \"unbonding_period\":\"1814400s\", \"latest_height\":{\"revision_number\":\"0\",\"revision_height\":\"2\"}, \"proof_specs\":[{\"leaf_spec\":{\"hash\":\"SHA256\",\"prehash_key\":\"NO_HASH\",\"prehash_value\":\"SHA256\",\"length\":\"VAR_PROTO\",\"prefix\":\"AA==\"},\"inner_spec\":{\"child_order\":[0,1],\"child_size\":33,\"min_prefix_length\":4,\"max_prefix_length\":12,\"empty_child\":null,\"hash\":\"SHA256\"},\"max_depth\":0,\"min_depth\":0},{\"leaf_spec\":{\"hash\":\"SHA256\",\"prehash_key\":\"NO_HASH\",\"prehash_value\":\"SHA256\",\"length\":\"VAR_PROTO\",\"prefix\":\"AA==\"},\"inner_spec\":{\"child_order\":[0,1],\"child_size\":32,\"min_prefix_length\":1,\"max_prefix_length\":1,\"empty_child\":null,\"hash\":\"SHA256\"},\"max_depth\":0,\"min_depth\":0}], \"upgrade_path\":[\"upgrade\",\"upgradedIBCState\"], }",
  "osmosisd tx gov submit-legacy-proposal migrate-cw-pool-contracts": "Submit a migrate cw pool contracts proposal",
  "osmosisd tx gov submit-legacy-proposal param-change": "Submit a parameter proposal along with an initial deposit. The proposal details must be supplied via a JSON file. For values that contains objects, only non-empty fields will be updated. IMPORTANT: Currently parameter changes are evaluated but not validated, so it is very important that any \"value\" change is valid (ie. correct type and within bounds) for its respective parameter, eg. \"MaxValidators\" should be an integer and not a decimal. Proper vetting of a parameter change proposal should prevent this from happening (no deposits should occur during the governance process), but it should be noted regardless. Example: $ osmosisd tx gov submit-proposal param-change <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Staking Param Change\", \"description\": \"Update max validators\", \"changes\": [ { \"subspace\": \"staking\", \"key\": \"MaxValidators\", \"value\": 105 } ], \"deposit\": \"1000stake\" }",
  "osmosisd tx gov submit-legacy-proposal remove-superfluid-assets-proposal": "Submit a superfluid asset remove proposal",
  "osmosisd tx gov submit-legacy-proposal replace-migration-records-proposal": "Submit a replace migration record proposal. Passing in poolIds separated by commas would be parsed automatically to pairs of migration record. Ex) 2,4,1,5 -> [(Balancer 2, CL 4), (Balancer 1, CL 5)]",
  "osmosisd tx gov submit-legacy-proposal replace-pool-incentives": "Submit a full replacement to the records for pool incentives",
  "osmosisd tx gov submit-legacy-proposal set-scaling-factor-controller-proposal": "Submit a set scaling factor controller proposal. Sample proposal file: { \"title\": \"Set Scaling Factor Controller Proposal\", \"description\": \"Change scaling factor controller address from osmoXXX to osmoYYY\" \"pool-id\": 1, \"controller-address\": \"osmoYYY\" } >>> osmosisd tx gov submit-proposal set-scaling-factor-controller-proposal \\ --proposal proposal.json \\ --deposit 1600000000uosmo \\ Sample proposal with flags >>> osmosisd tx gov submit-proposal set-scaling-factor-controller-proposal \\ --title \"Set Scaling Factor Controller Proposal\" \\ --summary \"Change scaling factor controller address from osmoXXX to osmoYYY\" --deposit 1600000000uosmo --pool-id 1 --controller-address osmoYYY",
  "osmosisd tx gov submit-legacy-proposal set-superfluid-assets-proposal": "Submit a superfluid asset set proposal",
  "osmosisd tx gov submit-legacy-proposal software-upgrade": "Submit a software upgrade along with an initial deposit. Please specify a unique name and height for the upgrade to take effect. You may include info to reference a binary download link, in a format compatible with: https://github.com/cosmos/cosmos-sdk/tree/main/cosmovisor",
  "osmosisd tx gov submit-legacy-proposal tick-spacing-decrease-proposal": "Submit a tick spacing decrease proposal. Passing in FlagPoolIdToTickSpacingRecords separated by commas would be parsed automatically to pairs of PoolIdToTickSpacing records. Ex) --pool-tick-spacing-records=1,10,5,1 -> [(poolId 1, newTickSpacing 10), (poolId 5, newTickSpacing 1)] Note: The new tick spacing value must be less than the current tick spacing value.",
  "osmosisd tx gov submit-legacy-proposal update-client": "Submit an update IBC client proposal along with an initial deposit. Please specify a subject client identifier you want to update.. Please specify the substitute client the subject client will be updated to.",
  "osmosisd tx gov submit-legacy-proposal update-fee-token": "Submit a update fee token record proposal. Passing in denom,poolID pairs separated by commas would be parsed automatically to pairs of fee token records. Ex) uosmo,1,uion,2,ufoo,0 -> [Adds uosmo<>pool1, uion<>pool2, Removes ufoo as a fee token]",
  "osmosisd tx gov submit-legacy-proposal update-migration-records-proposal": "Submit a update migration record proposal. Passing in poolIds separated by commas would be parsed automatically to pairs of migration record. Ex) 2,4,1,5 -> [(Balancer 2, CL 4), (Balancer 1, CL 5)]",
  "osmosisd tx gov submit-legacy-proposal update-pool-incentives": "Submit an update to the records for pool incentives",
  "osmosisd tx gov submit-legacy-proposal update-unpool-whitelist": "This proposal will update the unpool whitelist if passed. Every pool id must be valid. If the pool id is invalid, the proposal will not be submitted. If the flag to overwrite is set, the whitelist is completely overridden. Otherwise, it is appended to the existing whitelist, having all duplicates removed.",
  "osmosisd tx gov submit-legacy-proposal upload-code-id-and-whitelist": "Submit an upload code id and whitelist proposal",
  "osmosisd tx gov submit-proposal": "Submit a proposal along with some messages, metadata and deposit. They should be defined in a JSON file. Example: $ osmosisd tx gov submit-proposal path/to/proposal.json Where proposal.json contains: { // array of proto-JSON-encoded sdk.Msgs \"messages\": [ { \"@type\": \"/cosmos.bank.v1beta1.MsgSend\", \"from_address\": \"cosmos1...\", \"to_address\": \"cosmos1...\", \"amount\":[{\"denom\": \"stake\",\"amount\": \"10\"}] } ], \"metadata: \"4pIMOgIGx1vZGU=\", // base64-encoded metadata \"deposit\": \"10stake\" \"title: \"My proposal\" \"summary\": \"A short summary of my proposal\", \"expedited\": false } metadata example: { \"title\": \"\", \"authors\": [\"\"], \"summary\": \"\", \"details\": \"\", \"proposal_forum_url\": \"\", \"vote_option_context\": \"\", }",
  "osmosisd tx gov vote": "Submit a vote for an active proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd tx gov vote 1 yes --from mykey",
  "osmosisd tx gov weighted-vote": "Submit a vote for an active proposal. You can find the proposal-id by running \"osmosisd query gov proposals\". Example: $ osmosisd tx gov weighted-vote 1 yes=0.6,no=0.3,abstain=0.05,no_with_veto=0.05 --from mykey",
  "osmosisd tx ibc": "IBC transaction subcommands",
  "osmosisd tx ibc channel": "IBC channel transaction subcommands",
  "osmosisd tx ibc client": "IBC client transaction subcommands",
  "osmosisd tx ibc client create": "create a new IBC client with the specified client state and consensus state - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}",
  "osmosisd tx ibc client misbehaviour": "submit a client misbehaviour to prevent future updates",
  "osmosisd tx ibc client update": "update existing client with a client message, for example a header, misbehaviour or batch update",
  "osmosisd tx ibc client upgrade": "upgrade the IBC client associated with the provided client identifier while providing proof committed by the counterparty chain to the new client and consensus states - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}",
  "osmosisd tx ibc-transfer": "IBC fungible token transfer transaction subcommands",
  "osmosisd tx ibc-transfer transfer": "Transfer a fungible token through IBC. Timeouts can be specified as absolute or relative using the \"absolute-timeouts\" flag. Timeout height can be set by passing in the height string in the form {revision}-{height} using the \"packet-timeout-height\" flag. Relative timeout height is added to the block height queried from the latest consensus state corresponding to the counterparty channel. Relative timeout timestamp is added to the greater value of the local clock time and the block timestamp queried from the latest consensus state corresponding to the counterparty channel. Any timeout set to 0 is disabled.",
  "osmosisd tx incentives": "incentives transactions subcommands",
  "osmosisd tx incentives add-to-gauge": "add coins to gauge to distribute more rewards to users",
  "osmosisd tx incentives create-gauge": "create a gauge to distribute rewards to users. For duration lock gauges set poolId = 0 and for all CL (no-lock) gauges set it to a CL poolId.",
  "osmosisd tx incentives create-group": "create a group in order to split incentives between pools",
  "osmosisd tx interchain-accounts": "IBC interchain accounts transaction subcommands",
  "osmosisd tx interchain-accounts controller": "IBC interchain accounts controller transaction subcommands",
  "osmosisd tx interchain-accounts controller register": "Register an account on the counterparty chain via the connection id from the source chain. Connection identifier should be for the source chain and the interchain account will be created on the counterparty chain. Callers are expected to provide the appropriate application version string via {version} flag. Generates a new port identifier using the provided owner string, binds to the port identifier and claims the associated capability.",
  "osmosisd tx interchain-accounts controller send-tx": "Submits pre-built packet data containing messages to be executed on the host chain and attempts to send the packet. Packet data is provided as json, file or string. An appropriate relative timeoutTimestamp must be provided with flag {relative-packet-timeout}",
  "osmosisd tx interchain-accounts host": "IBC interchain accounts host transaction subcommands",
  "osmosisd tx interchain-accounts host generate-packet-data": "generate-packet-data accepts a message string and serializes it (depending on the encoding parameter) using protobuf or proto3 JSON into packet data which is outputted to stdout. It can be used in conjunction with send-tx which submits pre-built packet data containing messages to be executed on the host chain. The default encoding format is protobuf if none is specified; otherwise the encoding flag can be used in combination with either \"proto3\" or \"proto3json\".",
  "osmosisd tx lockup": "lockup transactions subcommands",
  "osmosisd tx lockup begin-unlock-by-id": "begin unlock individual period lock by ID",
  "osmosisd tx lockup begin-unlock-tokens": "begin unlock not unlocking tokens from lockup pool for sender",
  "osmosisd tx lockup force-unlock-by-id": "force unlocks individual period lock by ID. if no amount provided, entire lock is unlocked",
  "osmosisd tx lockup lock-tokens": "lock tokens into lockup pool from user account",
  "osmosisd tx lockup set-reward-receiver-address": "sets reward receiver address for the designated lock id",
  "osmosisd tx multi-sign": "Sign transactions created with the --generate-only flag that require multisig signatures. Read one or more signatures from one or more [signature] file, generate a multisig signature compliant to the multisig key [name], and attach the key name to the transaction read from [file]. Example: $ osmosisd tx multisign transaction.json k1k2k3 k1sig.json k2sig.json k3sig.json If --signature-only flag is on, output a JSON representation of only the generated signature. If the --offline flag is on, the client will not reach out to an external node. Account number or sequence number lookups are not performed so you must set these parameters manually. The current multisig implementation defaults to amino-json sign mode. The SIGN_MODE_DIRECT sign mode is not supported.'",
  "osmosisd tx poolmanager": "poolmanager transactions subcommands",
  "osmosisd tx poolmanager create-pool": "Must provide path to a pool JSON file (--pool-file) describing the pool to be created",
  "osmosisd tx poolmanager set-denom-pair-taker-fee": "Allows admin addresses to set the taker fee for a denom pair. Passing in set-denom-pair-taker-fee separated by commas would be parsed automatically to pairs of denomPairTakerFee records. Ex) set-denom-pair-taker-fee uion,uosmo,0.0016,stake,uosmo,0.005,uatom,uosmo,0.0015 -> [uion<>uosmo, takerFee 0.16%] [stake<>uosmo, takerFee 0.5%] [uatom<>uosmo, removes from state since its being set to the default takerFee value]",
  "osmosisd tx poolmanager split-route-swap-exact-amount-in": "split route swap exact amount in",
  "osmosisd tx poolmanager split-route-swap-exact-amount-out": "split route swap exact amount out",
  "osmosisd tx poolmanager swap-exact-amount-in": "swap exact amount in",
  "osmosisd tx poolmanager swap-exact-amount-out": "swap exact amount out",
  "osmosisd tx protorev": "protorev transactions subcommands",
  "osmosisd tx protorev set-admin-account-proposal": "submit a set protorev admin account proposal to set the admin account for x/protorev",
  "osmosisd tx protorev set-base-denoms": "Must provide a json file with all the base denoms that will be set. Sample json file: [ { \"step_size\" : 10000, \"denom\" : \"uosmo\" }, { \"step_size\" : 10000, \"denom\" : \"atom\" } ]",
  "osmosisd tx protorev set-developer-account": "set the protorev developer account",
  "osmosisd tx protorev set-enabled-proposal": "submit a set protorev enabled proposal to enable or disable the protocol",
  "osmosisd tx protorev set-hot-routes": "Must provide a json file with all of the hot routes that will be set. Sample json file: [ { \"token_in\": \"uosmo\", \"token_out\": \"ibc/123...\", \"arb_routes\" : [ { \"trades\": [ { \"pool\": 1, \"token_in\": \"uosmo\", \"token_out\": \"uatom\" }, { \"pool\": 2, \"token_in\": \"uatom\", \"token_out\": \"ibc/123...\" }, { \"pool\": 0, \"token_in\": \"ibc/123...\", \"token_out\": \"uosmo\" } ], \"step_size\": 1000000 } ] } ]",
  "osmosisd tx protorev set-info-by-pool-type": "Must provide a json file with all the pool info that will be set. This does NOT set info for a single pool type. All information must be provided across all pool types in the json file. Sample json file: { \"stable\" : { \"weight\" : 1, }, \"concentrated\" : { \"weight\" : 1, \"max_ticks_crossed\": 10, }, \"balancer\" : { \"weight\" : 1, }, \"cosmwasm\" : { \"weight_maps\" : [ {\"contract_address\" : \"cosmos123...\", \"weight\" : 1} ], }, }",
  "osmosisd tx protorev set-max-pool-points-per-block": "set the max pool points that can be consumed per block",
  "osmosisd tx protorev set-max-pool-points-per-tx": "set the max pool points that can be consumed per tx",
  "osmosisd tx sign": "Sign a transaction created with the --generate-only flag. It will read a transaction from [file], sign it, and print its JSON encoding. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only. Full multisig signed transactions may eventually be generated via the 'multisign' command.",
  "osmosisd tx sign-batch": "Sign batch files of transactions generated with --generate-only. The command processes list of transactions from a file (one StdTx each line), or multiple files. Then generates signed transactions or signatures and print their JSON encoding, delimited by '\\n'. As the signatures are generated, the command updates the account and sequence number accordingly. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and the sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The sequence will be incremented automatically for each transaction that is signed. If --account-number or --sequence flag is used when offline=false, they are ignored and overwritten by the default flag values. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only.",
  "osmosisd tx slashing": "Slashing transaction subcommands",
  "osmosisd tx slashing unjail": "unjail a jailed validator: $ <appd> tx slashing unjail --from mykey",
  "osmosisd tx staking": "Staking transaction subcommands",
  "osmosisd tx staking cancel-unbond": "Cancel Unbonding Delegation and delegate back to the validator. Example: $ osmosisd tx staking cancel-unbond osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake 2 --from mykey",
  "osmosisd tx staking create-validator": "create new validator initialized with a self-delegation to it",
  "osmosisd tx staking delegate": "Delegate an amount of liquid coins to a validator from your wallet. Example: $ osmosisd tx staking delegate osmovaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 1000stake --from mykey",
  "osmosisd tx staking edit-validator": "edit an existing validator account",
  "osmosisd tx staking redelegate": "Redelegate an amount of illiquid staking tokens from one validator to another. Example: $ osmosisd tx staking redelegate osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj osmovaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 100stake --from mykey",
  "osmosisd tx staking unbond": "Unbond an amount of bonded shares from a validator. Example: $ osmosisd tx staking unbond osmovaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake --from mykey",
  "osmosisd tx superfluid": "superfluid transactions subcommands",
  "osmosisd tx superfluid add-to-superfluid-cl-position": "add to an existing superfluid staked concentrated liquidity position",
  "osmosisd tx superfluid create-full-range-position-and-sf-delegate": "creates a full range concentrated position and superfluid delegates it to the provided validator",
  "osmosisd tx superfluid delegate": "superfluid delegate a lock to a validator",
  "osmosisd tx superfluid lock-and-superfluid-delegate": "lock and superfluid delegate",
  "osmosisd tx superfluid unbond-convert-and-stake": "instantly unbond any locked gamm shares convert them into osmo and stake",
  "osmosisd tx superfluid unbond-lock": "unbond lock that has been superfluid staked",
  "osmosisd tx superfluid undelegate": "superfluid undelegate a lock from a validator",
  "osmosisd tx superfluid undelegate-and-unbond-lock": "superfluid undelegate and unbond lock for the given amount of coin",
  "osmosisd tx superfluid unlock-and-migrate-to-cl": "unlock and migrate gamm shares to full range concentrated position",
  "osmosisd tx superfluid unpool-whitelisted-pool": "unpool whitelisted pool",
  "osmosisd tx tokenfactory": "tokenfactory transactions subcommands",
  "osmosisd tx tokenfactory burn": "Burn tokens from an address. Must have admin authority to do so.",
  "osmosisd tx tokenfactory change-admin": "Changes the admin address for a factory-created denom. Must have admin authority to do so.",
  "osmosisd tx tokenfactory create-denom": "create a new denom from an account. (Costs osmo though!)",
  "osmosisd tx tokenfactory mint": "Mint a denom to an address. Must have admin authority to do so.",
  "osmosisd tx tokenfactory set-beforesend-hook": "Set a cosmwasm contract to be the beforesend hook for a factory-created denom. Must have admin authority to do so.",
  "osmosisd tx txfees": "txfees transactions subcommands Usage:",
  "osmosisd tx validate-signatures": "Print the addresses that must sign the transaction, those who have already signed it, and make sure that signatures are in the correct order. The command would check whether all required signers have signed the transactions, whether the signatures were collected in the right order, and if the signature is valid over the given transaction. If the --offline flag is also set, signature validation over the transaction will be not be performed as that will require RPC communication with a full node.",
  "osmosisd tx valsetpref": "valsetpref transactions subcommands",
  "osmosisd tx valsetpref delegate-valset": "Delegate tokens to existing valset using delegatorAddress and tokenAmount.",
  "osmosisd tx valsetpref redelegate-valset": "Redelegate tokens from existing validators to new sets of validators",
  "osmosisd tx valsetpref set-valset": "Creates a new validator set for the delegator with valOperAddress and weight",
  "osmosisd tx valsetpref undelegate-rebalanced-valset": "Undelegates from an existing valset, but calculates the valset weights based on current user delegations.",
  "osmosisd tx valsetpref withdraw-reward-valset": "Withdraw delegation reward form the new validator set.",
  "osmosisd tx vesting": "Vesting transaction subcommands",
  "osmosisd tx vesting clawback": "Must be requested by the original funder address (--from). May provide a destination address (--dest), otherwise the coins return to the funder. Delegated or undelegating staking tokens will be transferred in the delegated (undelegating) state. The recipient is vulnerable to slashing, and must act to unbond the tokens if desired.",
  "osmosisd tx vesting create-clawback-vesting-account": "Must provide a lockup periods file (--lockup), a vesting periods file (--vesting), or both. If both files are given, they must describe schedules for the same total amount. If one file is omitted, it will default to a schedule that immediately unlocks or vests the entire amount. The described amount of coins will be transferred from the --from address to the vesting account. Unvested coins may be \"clawed back\" by the funder with the clawback command. Coins may not be transferred out of the account if they are locked or unvested, but may be staked. Staking rewards are subject to a proportional vesting encumbrance. A periods file is a JSON object describing a sequence of unlocking or vesting events, with a start time and an array of coins strings and durations relative to the start or previous event.",
  "osmosisd tx vesting create-cliff-vesting-account": "Create a new delayed vesting account funded with an allocation of tokens. All vesting accouts created will have their start time set by the committed block's time. The cliff duration should be specified in hours.",
  "osmosisd tx vesting create-periodic-vesting-account": "A sequence of coins and period length in seconds. Periods are sequential, in that the duration of of a period only starts at the end of the previous period. The duration of the first period starts upon account creation. For instance, the following periods.json file shows 20 \"test\" coins vesting 30 days apart from each other. Where periods.json contains: An array of coin strings and unix epoch times for coins to vest { \"start_time\": 1625204910, \"periods\":[ { \"coins\": \"10test\", \"length_seconds\":2592000 //30 days }, { \"coins\": \"10test\", \"length_seconds\":2592000 //30 days }, ] }",
  "osmosisd tx vesting create-permanent-locked-account": "Create a new account funded with an allocation of permanently locked tokens. These tokens may be used for staking but are non-transferable. Staking rewards will acrue as liquid and transferable tokens.",
  "osmosisd tx vesting create-vesting-account": "Create a new vesting account funded with an allocation of tokens. The account can either be a delayed or continuous vesting account, which is determined by the '--delayed' flag. All vesting accounts created will have their start time set by the committed block's time. The end_time must be provided as a UNIX epoch timestamp.",
  "osmosisd tx wasm": "Wasm transaction subcommands",
  "osmosisd tx wasm clear-contract-admin": "Clears admin for a contract to prevent further migrations",
  "osmosisd tx wasm execute": "Execute a command on a wasm contract",
  "osmosisd tx wasm grant": "Grant a authz permission",
  "osmosisd tx wasm grant contract": "Grant authorization to an address. Examples: $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-calls 1 --no-token-transfer --expiration 1667979596 $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-funds 100000uwasm --expiration 1667979596 $ osmosisd tx grant contract execution <grantee_addr> <contract_addr> --allow-all-messages --max-calls 5 --max-funds 100000uwasm --expiration 1667979596",
  "osmosisd tx wasm grant store-code": "Grant authorization to an address. Examples: $ osmosisd tx grant store-code <grantee_addr> 13a1fc994cc6d1c81b746ee0c0ff6f90043875e0bf1d9be6b7d779fc978dc2a5:everybody 1wqrtry681b746ee0c0ff6f90043875e0bf1d9be6b7d779fc978dc2a5:nobody --expiration 1667979596 $ osmosisd tx grant store-code <grantee_addr> *:osmosisd1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm,osmosisd1vx8knpllrj7n963p9ttd80w47kpacrhuts497x",
  "osmosisd tx wasm instantiate": "Creates a new instance of an uploaded wasm code with the given 'constructor' message. Each contract instance has a unique address assigned. Example: $ osmosisd tx wasm instantiate 1 '{\"foo\":\"bar\"}' --admin=\"$(osmosisd keys show mykey -a)\" \\ --from mykey --amount=\"100ustake\" --label \"local0.1.0\"",
  "osmosisd tx wasm instantiate2": "Creates a new instance of an uploaded wasm code with the given 'constructor' message. Each contract instance has a unique address assigned. They are assigned automatically but in order to have predictable addresses for special use cases, the given 'salt' argument and '--fix-msg' parameters can be used to generate a custom address. Predictable address example (also see 'osmosisd query wasm build-address -h'): $ osmosisd tx wasm instantiate2 1 '{\"foo\":\"bar\"}' $(echo -n \"testing\" | xxd -ps) --admin=\"$(osmosisd keys show mykey -a)\" \\ --from mykey --amount=\"100ustake\" --label \"local0.1.0\" \\ --fix-msg",
  "osmosisd tx wasm migrate": "Migrate a wasm contract to a new code version",
  "osmosisd tx wasm set-contract-admin": "Set new admin for a contract",
  "osmosisd tx wasm set-contract-label": "Set new label for a contract",
  "osmosisd tx wasm store": "Upload a wasm binary",
  "osmosisd tx wasm submit-proposal": "Submit a wasm proposal.",
  "osmosisd tx wasm submit-proposal add-code-upload-params-addresses": "Submit an add code upload params addresses proposal to add addresses to code upload config params",
  "osmosisd tx wasm submit-proposal clear-contract-admin": "Submit a clear admin for a contract to prevent further migrations proposal",
  "osmosisd tx wasm submit-proposal execute-contract": "Submit a execute wasm contract proposal (run by any address)",
  "osmosisd tx wasm submit-proposal instantiate-contract": "Submit an instantiate wasm contract proposal",
  "osmosisd tx wasm submit-proposal instantiate-contract-2": "Submit an instantiate wasm contract proposal with predictable address",
  "osmosisd tx wasm submit-proposal migrate-contract": "Submit a migrate wasm contract to a new code version proposal",
  "osmosisd tx wasm submit-proposal pin-codes": "Submit a pin code proposal for pinning a code to cache",
  "osmosisd tx wasm submit-proposal remove-code-upload-params-addresses": "Submit a remove code upload params addresses proposal to remove addresses from code upload config params",
  "osmosisd tx wasm submit-proposal set-contract-admin": "Submit a new admin for a contract proposal",
  "osmosisd tx wasm submit-proposal store-instantiate": "Submit a store and instantiate wasm contract proposal",
  "osmosisd tx wasm submit-proposal store-migrate": "Submit a store and migrate wasm contract proposal",
  "osmosisd tx wasm submit-proposal sudo-contract": "Submit a sudo wasm contract proposal (to call privileged commands)",
  "osmosisd tx wasm submit-proposal unpin-codes": "Submit a unpin code proposal for unpinning a code to cache",
  "osmosisd tx wasm submit-proposal update-instantiate-config": "Submit an update instantiate config proposal for multiple code ids. Example: $ osmosisd tx gov submit-proposal update-instantiate-config 1:nobody 2:everybody 3:osmo1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm,osmo1vx8knpllrj7n963p9ttd80w47kpacrhuts497x",
  "osmosisd tx wasm submit-proposal wasm-store": "Submit a wasm binary proposal",
  "osmosisd tx wasm update-instantiate-config": "Update instantiate config for a codeID",
  "osmosisd update-asset-list": "Updates asset list used by the CLI to replace ibc denoms with human readable names. Outputs: - cmd/osmosisd/cmd/osmosis-1-assetlist-manual.json for osmosis-1 - cmd/osmosisd/cmd/osmo-test-5-assetlist-manual.json for osmo-test-5",
  "osmosisd validate-genesis": "validates the genesis file at the default location or at the location passed as an arg",
  "osmosisd version": "Print the application binary version information",
  "gaiad": "Stargate Cosmos Hub App",
  "gaiad add-genesis-account": "Add a genesis account to genesis.json. The provided account must specify the account address or key name and a list of initial coins. If a key name is given, the address will be looked up in the local Keybase. The list of initial tokens must contain valid denominations. Accounts may optionally be supplied with vesting parameters.",
  "gaiad collect-gentxs": "Collect genesis txs and output a genesis.json file",
  "gaiad config": "Create or query an application CLI configuration file",
  "gaiad debug": "Tool for helping with debugging your application",
  "gaiad debug addr": "Convert an address between hex encoding and bech32. Example: $ gaiad debug addr cosmos1e0jnq2sun3dzjh8p2xq95kk0expwmd7shwjpfg",
  "gaiad debug bech32-convert": "Convert any bech32 string to the cosmos prefix Example: gaiad debug bech32-convert akash1a6zlyvpnksx8wr6wz8wemur2xe8zyh0ytz6d88 gaiad debug bech32-convert stride1673f0t8p893rqyqe420mgwwz92ac4qv6synvx2 --prefix osmo",
  "gaiad debug pubkey": "Decode a pubkey from proto JSON and display it's address. Example: $ gaiad debug pubkey '{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AurroA7jvfPd1AadmmOvWM2rJSwipXfRf8yD6pLbA2DJ\"}'",
  "gaiad debug raw-bytes": "Convert raw-bytes to hex. Example: $ gaiad debug raw-bytes [72 101 108 108 111 44 32 112 108 97 121 103 114 111 117 110 100]",
  "gaiad export": "Export state to JSON",
  "gaiad gentx": "Generate a genesis transaction that creates a validator with a self-delegation, that is signed by the key in the Keyring referenced by a given name. A node ID and Bech32 consensus pubkey may optionally be provided. If they are omitted, they will be retrieved from the priv_validator.json file. The following default parameters are included: delegation amount: 100000000stake commission rate: 0.1 commission max rate: 0.2 commission max change rate: 0.01 Example: $ gaiad gentx my-key-name 1000000stake --home=/path/to/home/dir --keyring-backend=os --chain-id=test-chain-1 \\ --moniker=\"myvalidator\" \\ --commission-max-change-rate=0.01 \\ --commission-max-rate=1.0 \\ --commission-rate=0.07 \\ --details=\"...\" \\ --security-contact=\"...\" \\ --website=\"...\"",
  "gaiad init": "Initialize validators's and node's configuration files.",
  "gaiad keys": "Keyring management commands. These keys may be in any format supported by the Tendermint crypto library and can be used by light-clients, full nodes, or any other application that needs to sign with a private key. The keyring supports the following backends: os Uses the operating system's default credentials store. file Uses encrypted file-based keystore within the app's configuration directory. This keyring will request a password each time it is accessed, which may occur multiple times in a single command resulting in repeated password prompts. kwallet Uses KDE Wallet Manager as a credentials management application. pass Uses the pass command line utility to store and retrieve keys. test Stores keys insecurely to disk. It does not prompt for a password to be unlocked and it should be use only for testing purposes. kwallet and pass backends depend on external tools. Refer to their respective documentation for more information: KWallet https://github.com/KDE/kwallet pass https://www.passwordstore.org/ The pass backend requires GnuPG: https://gnupg.org/",
  "gaiad keys add": "Derive a new private key and encrypt to disk. Optionally specify a BIP39 mnemonic, a BIP39 passphrase to further secure the mnemonic, and a bip32 HD path to derive a specific account. The key will be stored under the given name and encrypted with the given password. The only input that is required is the encryption password. If run with -i, it will prompt the user for BIP44 path, BIP39 mnemonic, and passphrase. The flag --recover allows one to recover a key from a seed passphrase. If run with --dry-run, a key would be generated (or recovered) but not stored to the local keystore. Use the --pubkey flag to add arbitrary public keys to the keystore for constructing multisig transactions. You can create and store a multisig key by passing the list of key names stored in a keyring and the minimum number of signatures required through --multisig-threshold. The keys are sorted by address, unless the flag --nosort is set. Example: keys add mymultisig --multisig \"keyname1,keyname2,keyname3\" --multisig-threshold 2",
  "gaiad keys delete": "Delete keys from the Keybase backend. Note that removing offline or ledger keys will remove only the public key references stored locally, i.e. private keys stored in a ledger device cannot be deleted with the CLI.",
  "gaiad keys export": "Export a private key from the local keyring in ASCII-armored encrypted format. When both the --unarmored-hex and --unsafe flags are selected, cryptographic private key material is exported in an INSECURE fashion that is designed to allow users to import their keys in hot wallets. This feature is for advanced users only that are confident about how to handle private keys work and are FULLY AWARE OF THE RISKS. If you are unsure, you may want to do some research and export your keys in ASCII-armored encrypted format.",
  "gaiad keys import": "Import a ASCII armored private key into the local keybase.",
  "gaiad keys list": "Return a list of all public keys stored by this key manager along with their associated name and address.",
  "gaiad keys migrate": "Migrate key information from the legacy (db-based) Keybase to the new keyring-based Keyring. The legacy Keybase used to persist keys in a LevelDB database stored in a 'keys' sub-directory of the old client application's home directory, e.g. $HOME/.gaiacli/keys/. For each key material entry, the command will prompt if the key should be skipped or not. If the key is not to be skipped, the passphrase must be entered. The key will only be migrated if the passphrase is correct. Otherwise, the command will exit and migration must be repeated. It is recommended to run in 'dry-run' mode first to verify all key migration material.",
  "gaiad keys mnemonic": "Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use --unsafe-entropy",
  "gaiad keys parse": "Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 cosmos prefixed format and vice versa.",
  "gaiad keys show": "Display keys details. If multiple names or addresses are provided, then an ephemeral multisig key will be created under the name \"multi\" consisting of all the keys provided by name and multisig threshold.",
  "gaiad query": "Querying subcommands",
  "gaiad query account": "Query for account by address",
  "gaiad query auth": "Querying commands for the auth module",
  "gaiad query auth account": "Query for account by address",
  "gaiad query auth accounts": "Query all the accounts",
  "gaiad query auth module-account": "Query module account info by module name",
  "gaiad query auth params": "Query the current auth parameters: $ <appd> query auth params",
  "gaiad query authz": "Querying commands for the authz module",
  "gaiad query authz grants": "Query authorization grants for a granter-grantee pair. If msg-type-url is set, it will select grants only for that msg type. Examples: $ gaiad query authz grants cosmos1skj.. cosmos1skjwj.. $ gaiad query authz grants cosmos1skjw.. cosmos1skjwj.. /cosmos.bank.v1beta1.MsgSend",
  "gaiad query authz grants-by-grantee": "Query authorization grants granted to a grantee. Examples: $ gaiad q authz grants-by-grantee cosmos1skj..",
  "gaiad query authz grants-by-granter": "Query authorization grants granted by granter. Examples: $ gaiad q authz grants-by-granter cosmos1skj..",
  "gaiad query bank": "Querying commands for the bank module",
  "gaiad query bank balances": "Query the total balance of an account or of a specific denomination. Example: $ gaiad query bank balances [address] $ gaiad query bank balances [address] --denom=[denom]",
  "gaiad query bank denom-metadata": "Query the client metadata for all the registered coin denominations Example: To query for the client metadata of all coin denominations use: $ gaiad query bank denom-metadata To query for the client metadata of a specific coin denomination use: $ gaiad query bank denom-metadata --denom=[denom]",
  "gaiad query bank total": "Query total supply of coins that are held by accounts in the chain. Example: $ gaiad query bank total To query for the total supply of a specific coin denomination use: $ gaiad query bank total --denom=[denom]",
  "gaiad query block": "Get verified data for a the block at given height",
  "gaiad query distribution": "Querying commands for the distribution module",
  "gaiad query distribution commission": "Query validator commission rewards from delegators to that validator. Example: $ gaiad query distribution commission cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query distribution community-pool": "Query all coins in the community pool which is under Governance control. Example: $ gaiad query distribution community-pool",
  "gaiad query distribution params": "Query distribution params",
  "gaiad query distribution rewards": "Query all rewards earned by a delegator, optionally restrict to rewards from a single validator. Example: $ gaiad query distribution rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p $ gaiad query distribution rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query distribution slashes": "Query all slashes of a validator for a given block range. Example: $ gaiad query distribution slashes cosmosvalopervaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 0 100",
  "gaiad query distribution tokenize-share-record-rewards": "Query the query tokenize share record rewards. Example: $ gaiad query distribution tokenize-share-record-rewards cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query distribution validator-outstanding-rewards": "Query distribution outstanding (un-withdrawn) rewards for a validator and all their delegations. Example: $ gaiad query distribution validator-outstanding-rewards cosmosvaloper1lwjmdnks33xwnmfayc64ycprww49n33mtm92ne",
  "gaiad query feegrant": "Querying commands for the feegrant module",
  "gaiad query feegrant grant": "Query details for a grant. You can find the fee-grant of a granter and grantee. Example: $ gaiad query feegrant grant [granter] [grantee]",
  "gaiad query feegrant grants-by-grantee": "Queries all the grants for a grantee address. Example: $ gaiad query feegrant grants-by-grantee [grantee]",
  "gaiad query feegrant grants-by-granter": "Queries all the grants issued for a granter address. Example: $ gaiad query feegrant grants-by-granter [granter]",
  "gaiad query globalfee": "Querying commands for the global fee module",
  "gaiad query globalfee params": "Show globalfee requirement: minimum_gas_prices, bypass_min_fee_msg_types, max_total_bypass_minFee_msg_gas_usage",
  "gaiad query gov": "Querying commands for the governance module",
  "gaiad query gov deposit": "Query details for a single proposal deposit on a proposal by its identifier. Example: $ gaiad query gov deposit 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk",
  "gaiad query gov deposits": "Query details for all deposits on a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov deposits 1",
  "gaiad query gov param": "Query the all the parameters for the governance process. Example: $ gaiad query gov param voting $ gaiad query gov param tallying $ gaiad query gov param deposit",
  "gaiad query gov params": "Query the all the parameters for the governance process. Example: $ gaiad query gov params",
  "gaiad query gov proposal": "Query details for a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov proposal 1",
  "gaiad query gov proposals": "Query for a all paginated proposals that match optional filters: Example: $ gaiad query gov proposals --depositor cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ gaiad query gov proposals --voter cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk $ gaiad query gov proposals --status (DepositPeriod|VotingPeriod|Passed|Rejected) $ gaiad query gov proposals --page=2 --limit=100",
  "gaiad query gov proposer": "Query which address proposed a proposal with a given ID. Example: $ gaiad query gov proposer 1",
  "gaiad query gov tally": "Query tally of votes on a proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad query gov tally 1",
  "gaiad query gov vote": "Query details for a single vote on a proposal given its identifier. Example: $ gaiad query gov vote 1 cosmos1skjwj5whet0lpe65qaq4rpq03hjxlwd9nf39lk",
  "gaiad query gov votes": "Query vote details for a single proposal by its identifier. Example: $ gaiad query gov votes 1 $ gaiad query gov votes 1 --page=2 --limit=100",
  "gaiad query ibc": "Querying commands for the IBC module",
  "gaiad query ibc channel": "IBC channel query subcommands",
  "gaiad query ibc channel channels": "Query all channels from a chain",
  "gaiad query ibc channel client-state": "Query the client state associated with a channel, by providing its port and channel identifiers.",
  "gaiad query ibc channel connections": "Query all channels associated with a connection",
  "gaiad query ibc channel end": "Query an IBC channel end from a port and channel identifiers",
  "gaiad query ibc channel next-sequence-receive": "Query the next receive sequence for a given channel",
  "gaiad query ibc channel packet-ack": "Query a packet acknowledgement",
  "gaiad query ibc channel packet-commitment": "Query a packet commitment",
  "gaiad query ibc channel packet-commitments": "Query all packet commitments associated with a channel",
  "gaiad query ibc channel packet-receipt": "Query a packet receipt",
  "gaiad query ibc channel unreceived-acks": "Given a list of acknowledgement sequences from counterparty, determine if an ack on the counterparty chain has been received on the executing chain. The return value represents: - Unreceived packet acknowledgement: packet commitment exists on original sending (executing) chain and ack exists on receiving chain.",
  "gaiad query ibc channel unreceived-packets": "Determine if a packet, given a list of packet commitment sequences, is unreceived. The return value represents: - Unreceived packet commitments: no acknowledgement exists on receiving chain for the given packet commitment sequence on sending chain.",
  "gaiad query ibc client": "IBC client query subcommands",
  "gaiad query ibc client consensus-state": "Query the consensus state for a particular light client at a given height. If the '--latest' flag is included, the query returns the latest consensus state, overriding the height argument.",
  "gaiad query ibc client consensus-state-heights": "Query the heights of all consensus states associated with the provided client ID.",
  "gaiad query ibc client consensus-states": "Query all the consensus states from a given client state.",
  "gaiad query ibc client header": "Query the latest Tendermint header of the running chain",
  "gaiad query ibc client params": "Query the current ibc client parameters",
  "gaiad query ibc client self-consensus-state": "Query the self consensus state for this chain. This result may be used for verifying IBC clients representing this chain which are hosted on counterparty chains.",
  "gaiad query ibc client state": "Query stored client state",
  "gaiad query ibc client states": "Query all available light clients",
  "gaiad query ibc client status": "Query client activity status. Any client without an 'Active' status is considered inactive",
  "gaiad query ibc connection": "IBC connection query subcommands",
  "gaiad query ibc connection connections": "Query all connections ends from a chain",
  "gaiad query ibc connection end": "Query stored connection end",
  "gaiad query ibc connection path": "Query stored client connection paths",
  "gaiad query ibc-router": "",
  "gaiad query ibc-router params": "Query the current ibc-router parameters",
  "gaiad query ibc-transfer": "IBC fungible token transfer query subcommands",
  "gaiad query ibc-transfer denom-hash": "Query the denom hash info from a given denom trace",
  "gaiad query ibc-transfer denom-trace": "Query the denom trace info from a given trace hash or ibc denom",
  "gaiad query ibc-transfer denom-traces": "Query the trace info for all token denominations",
  "gaiad query ibc-transfer escrow-address": "Get the escrow address for a channel",
  "gaiad query ibc-transfer params": "Query the current ibc-transfer parameters",
  "gaiad query interchain-accounts": "interchain-accounts subcommands",
  "gaiad query interchain-accounts controller": "interchain-accounts controller subcommands",
  "gaiad query interchain-accounts controller interchain-account": "Query the controller submodule for the interchain account address for a given owner on a particular connection",
  "gaiad query interchain-accounts controller params": "Query the current interchain-accounts controller submodule parameters",
  "gaiad query interchain-accounts host": "interchain-accounts host subcommands",
  "gaiad query interchain-accounts host packet-events": "Query the interchain-accounts host submodule packet events for a particular channel and sequence",
  "gaiad query interchain-accounts host params": "Query the current interchain-accounts host submodule parameters",
  "gaiad query liquidity": "Querying commands for the liquidity module",
  "gaiad query liquidity batch": "Query details of a liquidity pool batch Example: $ gaiad query liquidity batch 1",
  "gaiad query liquidity deposit": "Query the deposit messages on the liquidity pool batch for the specified pool-id and msg-index If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed from the beginning of the next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity deposit 1 20",
  "gaiad query liquidity deposits": "Query all deposit messages of the liquidity pool batch on the specified pool If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity deposits 1",
  "gaiad query liquidity params": "Query values set as liquidity parameters. Example: $ gaiad query liquidity params",
  "gaiad query liquidity pool": "Query details of a liquidity pool Example: $ gaiad query liquidity pool 1 Example (with pool coin denom): $ gaiad query liquidity pool --pool-coin-denom=[denom] Example (with reserve acc): $ gaiad query liquidity pool --reserve-acc=[address]",
  "gaiad query liquidity pools": "Query details about all liquidity pools on a network. Example: $ gaiad query liquidity pools",
  "gaiad query liquidity swap": "Query for the swap message on the batch of the liquidity pool specified pool-id and msg-index If the batch message are normally processed and from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity swap 1 20",
  "gaiad query liquidity swaps": "Query all swap messages in the liquidity pool batch for the specified pool-id If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity swaps 1",
  "gaiad query liquidity withdraw": "Query the withdraw messages in the liquidity pool batch for the specified pool-id and msg-index if the batch message are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity withdraw 1 20",
  "gaiad query liquidity withdraws": "Query all withdraw messages on the liquidity pool batch for the specified pool-id If batch messages are normally processed from the endblock, the resulting state is applied and the messages are removed in the beginning of next block. To query for past blocks, query the block height using the REST/gRPC API of a node that is not pruned. Example: $ gaiad query liquidity withdraws 1",
  "gaiad query mint": "Querying commands for the minting module",
  "gaiad query mint annual-provisions": "Query the current minting annual provisions value",
  "gaiad query mint inflation": "Query the current minting inflation value",
  "gaiad query mint params": "Query the current minting parameters",
  "gaiad query params": "Querying commands for the params module",
  "gaiad query params subspace": "Query for raw parameters by subspace and key",
  "gaiad query provider": "Querying commands for the ccv provider module",
  "gaiad query provider consumer-genesis": "Query for consumer chain genesis state by chain id",
  "gaiad query provider list-consumer-chains": "Query active consumer chains for provider chain.",
  "gaiad query provider list-start-proposals": "Query mature and pending consumer chains start proposals on provider chain. Matured proposals will be executed on the next block - their spawn_time has passed Pending proposals are waiting for their spawn_time to pass.",
  "gaiad query provider list-stop-proposals": "Query mature and pending consumer chains stop proposals on provider chain. Matured proposals will be executed on the next block - their stop_time has passed Pending proposals are waiting for their stop_time to pass.",
  "gaiad query provider registered-consumer-reward-denoms": "Returns the registered consumer reward denoms. Example: $ gaiad query provider registered-consumer-reward-denoms",
  "gaiad query provider throttle-state": "Returns state relevant to throttled slash packet queue on the provider chain. Queue is ordered by time of arrival. Example: $ gaiad query provider throttle-state",
  "gaiad query provider throttled-consumer-packet-data": "Returns the current pending VSCMatured and slash packet data instances for a consumer chainId. Queue is ordered by ibc sequence number. Example: $ gaiad query provider throttled-consumer-packet-data foochain",
  "gaiad query provider validator-consumer-key": "Returns the currently assigned validator consensus public key for a consumer chain, if one has been assigned. Example: $ gaiad query provider validator-consumer-key foochain cosmosvalcons1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query provider validator-provider-key": "Returns the currently assigned validator consensus public key for the provider chain. Example: $ gaiad query provider validator-provider-key foochain cosmosvalcons1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query slashing": "Querying commands for the slashing module",
  "gaiad query slashing params": "Query genesis parameters for the slashing module: $ <appd> query slashing params",
  "gaiad query slashing signing-info": "Use a validators' consensus public key to find the signing-info for that validator: $ <appd> query slashing signing-info '{\"@type\":\"/cosmos.crypto.ed25519.PubKey\",\"key\":\"OauFcTKbN5Lx3fJL689cikXBqe+hcp6Y+x0rYUdR9Jk=\"}'",
  "gaiad query slashing signing-infos": "signing infos of validators: $ <appd> query slashing signing-infos",
  "gaiad query staking": "Querying commands for the staking module",
  "gaiad query staking all-tokenize-share-records": "Query for all tokenize share records. Example: $ gaiad query staking all-tokenize-share-records",
  "gaiad query staking delegation": "Query delegations for an individual delegator on an individual validator. Example: $ gaiad query staking delegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking delegations": "Query delegations for an individual delegator on all validators. Example: $ gaiad query staking delegations cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "gaiad query staking delegations-to": "Query delegations on an individual validator. Example: $ gaiad query staking delegations-to cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking historical-info": "Query historical info at given height. Example: $ gaiad query staking historical-info 5",
  "gaiad query staking last-tokenize-share-record-id": "Query for last tokenize share record id. Example: $ gaiad query staking last-tokenize-share-record-id",
  "gaiad query staking params": "Query values set as staking parameters. Example: $ gaiad query staking params",
  "gaiad query staking pool": "Query values for amounts stored in the staking pool. Example: $ gaiad query staking pool",
  "gaiad query staking redelegation": "Query a redelegation record for an individual delegator between a source and destination validator. Example: $ gaiad query staking redelegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking redelegations": "Query all redelegation records for an individual delegator. Example: $ gaiad query staking redelegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "gaiad query staking redelegations-from": "Query delegations that are redelegating _from_ a validator. Example: $ gaiad query staking redelegations-from cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking tokenize-share-lock-info": "Query the status of a tokenize share lock for a given account Example: $ gaiad query staking tokenize-share-lock-info cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking tokenize-share-record-by-denom": "Query individual tokenize share record information by share denom. Example: $ gaiad query staking tokenize-share-record-by-denom",
  "gaiad query staking tokenize-share-record-by-id": "Query individual tokenize share record information by share by id. Example: $ gaiad query staking tokenize-share-record-by-id [id]",
  "gaiad query staking tokenize-share-records-owned": "Query tokenize share records by address. Example: $ gaiad query staking tokenize-share-records-owned [owner]",
  "gaiad query staking total-liquid-staked": "Query for total number of liquid staked tokens. Liquid staked tokens are identified as either a tokenized delegation, or tokens owned by an interchain account. Example: $ gaiad query staking total-liquid-staked",
  "gaiad query staking total-tokenize-share-assets": "Query for total tokenized staked assets. Example: $ gaiad query staking total-tokenize-share-assets",
  "gaiad query staking unbonding-delegation": "Query unbonding delegations for an individual delegator on an individual validator. Example: $ gaiad query staking unbonding-delegation cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking unbonding-delegations": "Query unbonding delegations for an individual delegator. Example: $ gaiad query staking unbonding-delegations cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p",
  "gaiad query staking unbonding-delegations-from": "Query delegations that are unbonding _from_ a validator. Example: $ gaiad query staking unbonding-delegations-from cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking validator": "Query details about an individual validator. Example: $ gaiad query staking validator cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj",
  "gaiad query staking validators": "Query details about all validators on a network. Example: $ gaiad query staking validators",
  "gaiad query tendermint-validator-set": "Get the full tendermint validator set at given height",
  "gaiad query tx": "Example: $ gaiad query tx <hash> $ gaiad query tx --type=acc_seq <addr>/<sequence> $ gaiad query tx --type=signature <sig1_base64>,<sig2_base64...>",
  "gaiad query txs": "Search for transactions that match the exact given events where results are paginated. Each event takes the form of '{eventType}.{eventAttribute}={value}'. Please refer to each module's documentation for the full set of events to query for. Each module documents its respective events under 'xx_events.md'. Example: $ gaiad query txs --events 'message.sender=cosmos1...&message.action=withdraw_delegator_reward' --page 1 --limit 30",
  "gaiad query upgrade": "Querying commands for the upgrade module",
  "gaiad query upgrade applied": "If upgrade-name was previously executed on the chain, this returns the header for the block at which it was applied. This helps a client determine which binary was valid over a given range of blocks, as well as more context to understand past migrations.",
  "gaiad query upgrade module_versions": "Gets a list of module names and their respective consensus versions. Following the command with a specific module name will return only that module's information.",
  "gaiad query upgrade plan": "Gets the currently scheduled upgrade plan, if one exists",
  "gaiad rollback": "A state rollback is performed to recover from an incorrect application state transition, when Tendermint has persisted an incorrect app hash and is thus unable to make progress. Rollback overwrites a state at height n with the state at height n - 1. The application also roll back to height n - 1. No blocks are removed, so upon restarting Tendermint the transactions in block n will be re-executed against the application.",
  "gaiad rosetta": "spin up a rosetta server",
  "gaiad start": "Run the full node application with Tendermint in or out of process. By default, the application will run with Tendermint in process. Pruning options can be provided via the '--pruning' flag or alternatively with '--pruning-keep-recent', 'pruning-keep-every', and 'pruning-interval' together. For '--pruning' the options are as follows: default: the last 100 states are kept in addition to every 500th state; pruning at 10 block intervals nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node) everything: all saved states will be deleted, storing only the current and previous state; pruning at 10 block intervals custom: allow pruning options to be manually specified through 'pruning-keep-recent', 'pruning-keep-every', and 'pruning-interval' Node halting configurations exist in the form of two flags: '--halt-height' and '--halt-time'. During the ABCI Commit phase, the node will check if the current block height is greater than or equal to the halt-height or if the current block time is greater than or equal to the halt-time. If so, the node will attempt to gracefully shutdown and the block will not be committed. In addition, the node will not be able to commit subsequent blocks. For profiling and benchmarking purposes, CPU profiling can be enabled via the '--cpu-profile' flag which accepts a path for the resulting pprof file. The node may be started in a 'query only' mode where only the gRPC and JSON HTTP API services are enabled via the 'grpc-only' flag. In this mode, Tendermint is bypassed and can be used when legacy queries are needed after an on-chain upgrade is performed. Note, when enabled, gRPC will also be automatically enabled.",
  "gaiad status": "Query remote node for status",
  "gaiad tendermint": "Tendermint subcommands",
  "gaiad tendermint reset-state": "Remove all the data and WAL",
  "gaiad tendermint show-address": "Shows this node's tendermint validator consensus address",
  "gaiad tendermint show-node-id": "Show this node's ID",
  "gaiad tendermint show-validator": "Show this node's tendermint validator info",
  "gaiad tendermint unsafe-reset-all": "(unsafe) Remove all the data and WAL, reset this node's validator to genesis state",
  "gaiad tendermint version": "Print protocols' and libraries' version numbers against which this app has been compiled.",
  "gaiad testnet": "testnet will create \"v\" number of directories and populate each with necessary files (private validator, genesis, config, etc.). Note, strict routability for addresses is turned off in the config file. Example: gaiad testnet --v 4 --output-dir ./output --starting-ip-address 192.168.10.2",
  "gaiad tx": "Transactions subcommands",
  "gaiad tx authz": "Authorize and revoke access to execute transactions on behalf of your address",
  "gaiad tx authz exec": "execute tx on behalf of granter account: Example: $ gaiad tx authz exec tx.json --from grantee $ gaiad tx bank send <granter> <recipient> --from <granter> --chain-id <chain-id> --generate-only > tx.json && gaiad tx authz exec tx.json --from grantee",
  "gaiad tx authz grant": "grant authorization to an address to execute a transaction on your behalf: Examples: $ gaiad tx authz grant cosmos1skjw.. send /cosmos.bank.v1beta1.MsgSend --spend-limit=1000stake --from=cosmos1skl.. $ gaiad tx authz grant cosmos1skjw.. generic --msg-type=/cosmos.gov.v1beta1.MsgVote --from=cosmos1sk..",
  "gaiad tx authz revoke": "revoke authorization from a granter to a grantee: Example: $ gaiad tx authz revoke cosmos1skj.. /cosmos.bank.v1beta1.MsgSend --from=cosmos1skj..",
  "gaiad tx bank": "Bank transaction subcommands",
  "gaiad tx bank send": "Send funds from one account to another. Note, the'--from' flag is ignored as it is implied from [from_key_or_address]. When using '--dry-run' a key name cannot be used, only a bech32 address.",
  "gaiad tx broadcast": "Broadcast transactions created with the --generate-only flag and signed with the sign command. Read a transaction from [file_path] and broadcast it to a node. If you supply a dash (-) argument in place of an input filename, the command reads from standard input. $ <appd> tx broadcast ./mytxn.json",
  "gaiad tx crisis": "Crisis transactions subcommands",
  "gaiad tx crisis invariant-broken": "Submit proof that an invariant broken to halt the chain",
  "gaiad tx decode": "Decode a binary encoded transaction string",
  "gaiad tx distribution": "Distribution transactions subcommands",
  "gaiad tx distribution fund-community-pool": "Funds the community pool with the specified amount Example: $ gaiad tx distribution fund-community-pool 100uatom --from mykey",
  "gaiad tx distribution set-withdraw-addr": "Set the withdraw address for rewards associated with a delegator address. Example: $ gaiad tx distribution set-withdraw-addr cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ld75ru9p --from mykey",
  "gaiad tx distribution withdraw-all-rewards": "Withdraw all rewards for a single delegator. Note that if you use this command with --broadcast-mode=sync or --broadcast-mode=async, the max-msgs flag will automatically be set to 0. Example: $ gaiad tx distribution withdraw-all-rewards --from mykey",
  "gaiad tx distribution withdraw-all-tokenize-share-rewards": "Withdraw reward for all owned TokenizeShareRecord Example: $ gaiad tx distribution withdraw-tokenize-share-rewards --from mykey",
  "gaiad tx distribution withdraw-rewards": "Withdraw rewards from a given delegation address, and optionally withdraw validator commission if the delegation address given is a validator operator. Example: $ gaiad tx distribution withdraw-rewards cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey $ gaiad tx distribution withdraw-rewards cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey --commission",
  "gaiad tx distribution withdraw-tokenize-share-rewards": "Withdraw reward for an owned TokenizeShareRecord Example: $ gaiad tx distribution withdraw-tokenize-share-rewards 1 --from mykey",
  "gaiad tx encode": "Encode transactions created with the --generate-only flag and signed with the sign command. Read a transaction from <file>, serialize it to the Amino wire protocol, and output it as base64. If you supply a dash (-) argument in place of an input filename, the command reads from standard input.",
  "gaiad tx evidence": "Evidence transaction subcommands",
  "gaiad tx feegrant": "Grant and revoke fee allowance for a grantee by a granter",
  "gaiad tx feegrant grant": "Grant authorization to pay fees from your address. Note, the'--from' flag is ignored as it is implied from [granter]. Examples: gaiad tx feegrant grant cosmos1skjw... cosmos1skjw... --spend-limit 100stake --expiration 2022-01-30T15:04:05Z or gaiad tx feegrant grant cosmos1skjw... cosmos1skjw... --spend-limit 100stake --period 3600 --period-limit 10stake --expiration 36000 or gaiad tx feegrant grant cosmos1skjw... cosmos1skjw... --spend-limit 100stake --expiration 2022-01-30T15:04:05Z --allowed-messages \"/cosmos.gov.v1beta1.MsgSubmitProposal,/cosmos.gov.v1beta1.MsgVote\"",
  "gaiad tx feegrant revoke": "revoke fee grant from a granter to a grantee. Note, the'--from' flag is ignored as it is implied from [granter]. Example: $ gaiad tx feegrant revoke cosmos1skj.. cosmos1skj..",
  "gaiad tx gov": "Governance transactions subcommands",
  "gaiad tx gov deposit": "Submit a deposit for an active proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad tx gov deposit 1 10stake --from mykey",
  "gaiad tx gov submit-proposal": "Submit a proposal along with an initial deposit. Proposal title, description, type and deposit can be given directly or through a proposal JSON file. Example: $ gaiad tx gov submit-proposal --proposal=\"path/to/proposal.json\" --from mykey Where proposal.json contains: { \"title\": \"Test Proposal\", \"description\": \"My awesome proposal\", \"type\": \"Text\", \"deposit\": \"10test\" } Which is equivalent to: $ gaiad tx gov submit-proposal --title=\"Test Proposal\" --description=\"My awesome proposal\" --type=\"Text\" --deposit=\"10test\" --from mykey",
  "gaiad tx gov submit-proposal cancel-software-upgrade": "Cancel a software upgrade along with an initial deposit.",
  "gaiad tx gov submit-proposal community-pool-spend": "Submit a community pool spend proposal along with an initial deposit. The proposal details must be supplied via a JSON file. Example: $ gaiad tx gov submit-proposal community-pool-spend <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Community Pool Spend\", \"description\": \"Pay me some Atoms!\", \"recipient\": \"cosmos1s5afhd6gxevu37mkqcvvsj8qeylhn0rz46zdlq\", \"amount\": \"1000stake\", \"deposit\": \"1000stake\" }",
  "gaiad tx gov submit-proposal consumer-addition": "Submit a consumer addition proposal along with an initial deposit. The proposal details must be supplied via a JSON file. Unbonding period, transfer timeout period and ccv timeout period should be provided as nanosecond time periods. Example: $ <appd> tx gov submit-proposal consumer-addition <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Create the FooChain\", \"description\": \"Gonna be a great chain\", \"chain_id\": \"foochain\", \"initial_height\": { \"revision_number\": 2, \"revision_height\": 3 }, \"genesis_hash\": \"Z2VuZXNpcyBoYXNo\", \"binary_hash\": \"YmluYXJ5IGhhc2g=\", \"spawn_time\": \"2022-01-27T15:59:50.121607-08:00\", \"blocks_per_distribution_transmission\": 1000, \"consumer_redistribution_fraction\": \"0.75\", \"distribution_transmission_channel\": \"\", \"historical_entries\": 10000, \"transfer_timeout_period\": 3600000000000, \"ccv_timeout_period\": 2419200000000000, \"unbonding_period\": 1728000000000000, \"deposit\": \"10000stake\" }",
  "gaiad tx gov submit-proposal consumer-removal": "Submit a consumer chain removal proposal along with an initial deposit. The proposal details must be supplied via a JSON file. Example: $ <appd> tx gov submit-proposal consumer-removal <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Stop the FooChain\", \"description\": \"It was a great chain\", \"chain_id\": \"foochain\", \"stop_time\": \"2022-01-27T15:59:50.121607-08:00\", \"deposit\": \"10000stake\" }",
  "gaiad tx gov submit-proposal equivocation": "Submit an equivocation proposal along with an initial deposit. The proposal details must be supplied via a JSON file. Example: $ <appd> tx gov submit-proposal equivocation <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Equivoque Foo validator\", \"description\": \"He double-signs on the Foobar consumer chain\", \"equivocations\": [ { \"height\": 10420042, \"time\": \"2023-01-27T15:59:50.121607-08:00\", \"power\": 10, \"consensus_address\": \"cosmosvalcons1s5afhd6gxevu37mkqcvvsj8qeylhn0rz46zdlq\" } ], \"deposit\": \"10000stake\" }",
  "gaiad tx gov submit-proposal ibc-upgrade": "Submit an IBC client breaking upgrade proposal along with an initial deposit. The client state specified is the upgraded client state representing the upgraded chain Example Upgraded Client State JSON: { \"@type\":\"/ibc.lightclients.tendermint.v1.ClientState\", \"chain_id\":\"testchain1\", \"unbonding_period\":\"1814400s\", \"latest_height\":{\"revision_number\":\"0\",\"revision_height\":\"2\"}, \"proof_specs\":[{\"leaf_spec\":{\"hash\":\"SHA256\",\"prehash_key\":\"NO_HASH\",\"prehash_value\":\"SHA256\",\"length\":\"VAR_PROTO\",\"prefix\":\"AA==\"},\"inner_spec\":{\"child_order\":[0,1],\"child_size\":33,\"min_prefix_length\":4,\"max_prefix_length\":12,\"empty_child\":null,\"hash\":\"SHA256\"},\"max_depth\":0,\"min_depth\":0},{\"leaf_spec\":{\"hash\":\"SHA256\",\"prehash_key\":\"NO_HASH\",\"prehash_value\":\"SHA256\",\"length\":\"VAR_PROTO\",\"prefix\":\"AA==\"},\"inner_spec\":{\"child_order\":[0,1],\"child_size\":32,\"min_prefix_length\":1,\"max_prefix_length\":1,\"empty_child\":null,\"hash\":\"SHA256\"},\"max_depth\":0,\"min_depth\":0}], \"upgrade_path\":[\"upgrade\",\"upgradedIBCState\"], }",
  "gaiad tx gov submit-proposal param-change": "Submit a parameter proposal along with an initial deposit. The proposal details must be supplied via a JSON file. For values that contains objects, only non-empty fields will be updated. IMPORTANT: Currently parameter changes are evaluated but not validated, so it is very important that any \"value\" change is valid (ie. correct type and within bounds) for its respective parameter, eg. \"MaxValidators\" should be an integer and not a decimal. Proper vetting of a parameter change proposal should prevent this from happening (no deposits should occur during the governance process), but it should be noted regardless. Example: $ gaiad tx gov submit-proposal param-change <path/to/proposal.json> --from=<key_or_address> Where proposal.json contains: { \"title\": \"Staking Param Change\", \"description\": \"Update max validators\", \"changes\": [ { \"subspace\": \"staking\", \"key\": \"MaxValidators\", \"value\": 105 } ], \"deposit\": \"1000stake\" }",
  "gaiad tx gov submit-proposal software-upgrade": "Submit a software upgrade along with an initial deposit. Please specify a unique name and height for the upgrade to take effect. You may include info to reference a binary download link, in a format compatible with: https://github.com/cosmos/cosmos-sdk/tree/master/cosmovisor",
  "gaiad tx gov submit-proposal update-client": "Submit an update IBC client proposal along with an initial deposit. Please specify a subject client identifier you want to update.. Please specify the substitute client the subject client will be updated to.",
  "gaiad tx gov vote": "Submit a vote for an active proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad tx gov vote 1 yes --from mykey",
  "gaiad tx gov weighted-vote": "Submit a vote for an active proposal. You can find the proposal-id by running \"gaiad query gov proposals\". Example: $ gaiad tx gov weighted-vote 1 yes=0.6,no=0.3,abstain=0.05,no_with_veto=0.05 --from mykey",
  "gaiad tx ibc": "IBC transaction subcommands",
  "gaiad tx ibc channel": "IBC channel transaction subcommands",
  "gaiad tx ibc client": "IBC client transaction subcommands",
  "gaiad tx ibc client create": "create a new IBC client with the specified client state and consensus state - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}",
  "gaiad tx ibc client misbehaviour": "submit a client misbehaviour to prevent future updates",
  "gaiad tx ibc client update": "update existing client with a header",
  "gaiad tx ibc client upgrade": "upgrade the IBC client associated with the provided client identifier while providing proof committed by the counterparty chain to the new client and consensus states - ClientState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ClientState\",\"sequence\":\"1\",\"frozen_sequence\":\"0\",\"consensus_state\":{\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"},\"allow_update_after_proposal\":false} - ConsensusState JSON example: {\"@type\":\"/ibc.lightclients.solomachine.v1.ConsensusState\",\"public_key\":{\"@type\":\"/cosmos.crypto.secp256k1.PubKey\",\"key\":\"AtK50+5pJOoaa04qqAqrnyAqsYrwrR/INnA6UPIaYZlp\"},\"diversifier\":\"testing\",\"timestamp\":\"10\"}",
  "gaiad tx ibc-transfer": "IBC fungible token transfer transaction subcommands",
  "gaiad tx ibc-transfer transfer": "Transfer a fungible token through IBC. Timeouts can be specified as absolute or relative using the \"absolute-timeouts\" flag. Timeout height can be set by passing in the height string in the form {revision}-{height} using the \"packet-timeout-height\" flag. Relative timeout height is added to the block height queried from the latest consensus state corresponding to the counterparty channel. Relative timeout timestamp is added to the greater value of the local clock time and the block timestamp queried from the latest consensus state corresponding to the counterparty channel. Any timeout set to 0 is disabled.",
  "gaiad tx liquidity": "Liquidity transaction subcommands",
  "gaiad tx liquidity create-pool": "Create liquidity pool and deposit coins. Example: $ gaiad tx liquidity create-pool 1 1000000000uatom,50000000000uusd --from mykey This example creates a liquidity pool of pool-type 1 (two coins) and deposits 1000000000uatom and 50000000000uusd. New liquidity pools can be created only for coin combinations that do not already exist in the network. [pool-type]: The id of the liquidity pool-type. The only supported pool type is 1 [deposit-coins]: The amount of coins to deposit to the liquidity pool. The number of deposit coins must be 2 in pool type 1.",
  "gaiad tx liquidity deposit": "Deposit coins a liquidity pool. This deposit request is not processed immediately since it is accumulated in the liquidity pool batch. All requests in a batch are treated equally and executed at the same swap price. Example: $ gaiad tx liquidity deposit 1 100000000uatom,5000000000uusd --from mykey This example request deposits 100000000uatom and 5000000000uusd to pool-id 1. Deposits must be the same coin denoms as the reserve coins. [pool-id]: The pool id of the liquidity pool [deposit-coins]: The amount of coins to deposit to the liquidity pool",
  "gaiad tx liquidity swap": "Swap offer coin with demand coin from the liquidity pool with the given order price. This swap request is not processed immediately since it is accumulated in the liquidity pool batch. All requests in a batch are treated equally and executed at the same swap price. The order of swap requests is ignored since the universal swap price is calculated in every batch to prevent front running. The requested swap is executed with a swap price that is calculated from the given swap price function of the pool, the other swap requests, and the liquidity pool coin reserve status. Swap orders are executed only when the execution swap price is equal to or greater than the submitted order price of the swap order. Example: $ gaiad tx liquidity swap 1 1 50000000uusd uatom 0.019 0.003 --from mykey For this example, imagine that an existing liquidity pool has with 1000000000uatom and 50000000000uusd. This example request swaps 50000000uusd for at least 950000uatom with the order price of 0.019 and swap fee rate of 0.003. A sufficient balance of half of the swap-fee-rate of the offer coin is required to reserve the offer coin fee. The order price is the exchange ratio of X/Y, where X is the amount of the first coin and Y is the amount of the second coin when their denoms are sorted alphabetically. Increasing order price reduces the possibility for your request to be processed and results in buying uatom at a lower price than the pool price. For explicit calculations, The swap fee rate must be the value that set as liquidity parameter in the current network. The only supported swap-type is 1. For the detailed swap algorithm, see https://github.com/gravity-devs/liquidity [pool-id]: The pool id of the liquidity pool [swap-type]: The swap type of the swap message. The only supported swap type is 1 (instant swap). [offer-coin]: The amount of offer coin to swap [demand-coin-denom]: The denomination of the coin to exchange with offer coin [order-price]: The limit order price for the swap order. The price is the exchange ratio of X/Y where X is the amount of the first coin and Y is the amount of the second coin when their denoms are sorted alphabetically [swap-fee-rate]: The swap fee rate to pay for swap that is proportional to swap amount. The swap fee rate must be the value that set as liquidity parameter in the current network.",
  "gaiad tx liquidity withdraw": "Withdraw pool coin from the specified liquidity pool. This swap request is not processed immediately since it is accumulated in the liquidity pool batch. All requests in a batch are treated equally and executed at the same swap price. Example: $ gaiad tx liquidity withdraw 1 10000pool96EF6EA6E5AC828ED87E8D07E7AE2A8180570ADD212117B2DA6F0B75D17A6295 --from mykey This example request withdraws 10000 pool coin from the specified liquidity pool. The appropriate pool coin must be requested from the specified pool. [pool-id]: The pool id of the liquidity pool [pool-coin]: The amount of pool coin to withdraw from the liquidity pool",
  "gaiad tx multisign": "Sign transactions created with the --generate-only flag that require multisig signatures. Read one or more signatures from one or more [signature] file, generate a multisig signature compliant to the multisig key [name], and attach the key name to the transaction read from [file]. Example: $ gaiad tx multisign transaction.json k1k2k3 k1sig.json k2sig.json k3sig.json If --signature-only flag is on, output a JSON representation of only the generated signature. If the --offline flag is on, the client will not reach out to an external node. Account number or sequence number lookups are not performed so you must set these parameters manually. The current multisig implementation defaults to amino-json sign mode. The SIGN_MODE_DIRECT sign mode is not supported.'",
  "gaiad tx multisign-batch": "Assemble a batch of multisig transactions generated by batch sign command. Read one or more signatures from one or more [signature] file, generate a multisig signature compliant to the multisig key [name], and attach the key name to the transaction read from [file]. Example: $ gaiad tx multisign-batch transactions.json multisigk1k2k3 k1sigs.json k2sigs.json k3sig.json The current multisig implementation defaults to amino-json sign mode. The SIGN_MODE_DIRECT sign mode is not supported.'",
  "gaiad tx provider": "provider transactions subcommands",
  "gaiad tx provider assign-consensus-key": "assign a consensus public key to use for a consumer chain",
  "gaiad tx provider register-consumer-reward-denom": "Registers a denom that can be sent from consumer chains to all validators and delegators as a reward. Costs a fee, which is specified in genesis.json under the \"consumer_reward_denom_fee\" key. Will fail if the sending account has an insufficient balance. Example: $ gaiad tx provider register-consumer-reward-denom untrn --from mykey",
  "gaiad tx sign": "Sign a transaction created with the --generate-only flag. It will read a transaction from [file], sign it, and print its JSON encoding. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only. Full multisig signed transactions may eventually be generated via the 'multisign' command.",
  "gaiad tx sign-batch": "Sign batch files of transactions generated with --generate-only. The command processes list of transactions from file (one StdTx each line), generate signed transactions or signatures and print their JSON encoding, delimited by '\\n'. As the signatures are generated, the command updates the account sequence number accordingly. If the --signature-only flag is set, it will output the signature parts only. The --offline flag makes sure that the client will not reach out to full node. As a result, the account and the sequence number queries will not be performed and it is required to set such parameters manually. Note, invalid values will cause the transaction to fail. The sequence will be incremented automatically for each transaction that is signed. The --multisig=<multisig_key> flag generates a signature on behalf of a multisig account key. It implies --signature-only.",
  "gaiad tx slashing": "Slashing transaction subcommands",
  "gaiad tx slashing unjail": "unjail a jailed validator: $ <appd> tx slashing unjail --from mykey",
  "gaiad tx staking": "Staking transaction subcommands",
  "gaiad tx staking cancel-unbond": "Cancel Unbonding Delegation and delegate back to the validator. Example: $ gaiad tx staking cancel-unbond cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake 2 --from mykey",
  "gaiad tx staking create-validator": "create new validator initialized with a self-delegation to it",
  "gaiad tx staking delegate": "Delegate an amount of liquid coins to a validator from your wallet. Example: $ gaiad tx staking delegate cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 1000stake --from mykey",
  "gaiad tx staking disable-tokenize-shares": "Disables the tokenization of shares for an address. The account must explicitly re-enable if they wish to tokenize again, at which point they must wait the chain's unbonding period. Example: $ gaiad tx staking disable-tokenize-shares --from mykey",
  "gaiad tx staking edit-validator": "edit an existing validator account",
  "gaiad tx staking enable-tokenize-shares": "Enables the tokenization of shares for an address after it had been disable. This transaction queues the enablement of tokenization, but the address must wait 1 unbonding period from the time of this transaction before tokenization is permitted. Example: $ gaiad tx staking enable-tokenize-shares --from mykey",
  "gaiad tx staking redeem-tokens": "Redeem specified amount of share tokens to delegation. Example: $ gaiad tx staking redeem-tokens 100sharetoken --from mykey",
  "gaiad tx staking redelegate": "Redelegate an amount of illiquid staking tokens from one validator to another. Example: $ gaiad tx staking redelegate cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj cosmosvaloper1l2rsakp388kuv9k8qzq6lrm9taddae7fpx59wm 100stake --from mykey",
  "gaiad tx staking tokenize-share": "Tokenize delegation to share tokens. Example: $ gaiad tx staking tokenize-share cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey",
  "gaiad tx staking transfer-tokenize-share-record": "Transfer ownership of TokenizeShareRecord. Example: $ gaiad tx staking transfer-tokenize-share-record 1 cosmos1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj --from mykey",
  "gaiad tx staking unbond": "Unbond an amount of bonded shares from a validator. Example: $ gaiad tx staking unbond cosmosvaloper1gghjut3ccd8ay0zduzj64hwre2fxs9ldmqhffj 100stake --from mykey",
  "gaiad tx staking unbond-validator": "Unbond a validator. Example: $ gaiad tx staking unbond-validator --from mykey",
  "gaiad tx staking validator-bond": "Mark a delegation as a validator self-bond. Example: $ gaiad tx staking validator-bond cosmosvaloper13h5xdxhsdaugwdrkusf8lkgu406h8t62jkqv3h --from mykey",
  "gaiad tx validate-signatures": "Print the addresses that must sign the transaction, those who have already signed it, and make sure that signatures are in the correct order. The command would check whether all required signers have signed the transactions, whether the signatures were collected in the right order, and if the signature is valid over the given transaction. If the --offline flag is also set, signature validation over the transaction will be not be performed as that will require RPC communication with a full node.",
  "gaiad tx vesting": "Vesting transaction subcommands",
  "gaiad tx vesting create-vesting-account": "Create a new vesting account funded with an allocation of tokens. The account can either be a delayed or continuous vesting account, which is determined by the '--delayed' flag. All vesting accouts created will have their start time set by the committed block's time. The end_time must be provided as a UNIX epoch timestamp.",
  "gaiad validate-genesis": "validates the genesis file at the default location or at the location passed as an arg",
  "gaiad version": "Print the application binary version information"
}